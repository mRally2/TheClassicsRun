<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="38">
  <CheatEntries>
    <CheatEntry>
      <ID>866</ID>
      <Description>"THE CLASSICS RUN"</Description>
      <Options moActivateChildrenAsWell="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>123</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
      <CheatEntries>
        <CheatEntry>
          <ID>786</ID>
          <Description>"Stage 1"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()
function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end
function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end
[ENABLE]
print "The Classics Run Tier 1 Cars Swap timer enabled"
function Stage1()
    if readPointer("[[[[027A4F60]+14]+68]+10]+4") ~= nil then
        local vehicles = {}
        --AUD_UR_QUA_91_PP_STOCK_1
        vehicles[1] = 2502726747
        vehicles[2] = 3073349389
        vehicles[3] = 143753977
        vehicles[4] = 4225561497
        vehicles[5] = 786735054
        vehicles[6] = 974677243
        vehicles[7] = 1071177696
        vehicles[8] = 1589944205
        --BMW_M3_E30_90_PP_STOCK_1
        vehicles[9] = 1719691339
        vehicles[10] = 4277695769
        vehicles[11] = 27874341
        vehicles[12] = 4078634043
        vehicles[13] = 2966784590
        vehicles[14] = 3817400829
        vehicles[15] = 308716637
        vehicles[16] = 3301497845
        --CHE_CAM_SS_67_PP_STOCK_1
        vehicles[17] = 1522441908
        vehicles[18] = 150155535
        vehicles[19] = 4047731096
        vehicles[20] = 3603434424
        vehicles[21] = 933904526
        vehicles[22] = 1760866290
        vehicles[23] = 1935511816
        vehicles[24] = 3986269571
        --CHE_EL_CAM_70_PP_STOCK_1
        vehicles[25] = 4152999272
        vehicles[26] = 2839316226
        vehicles[27] = 850809204
        vehicles[28] = 1507013332
        vehicles[29] = 2744598914
        vehicles[30] = 874261196
        vehicles[31] = 1489277057
        vehicles[32] = 3963367876
        --DOD_CHA_RT_71_PP_STOCK_1
        vehicles[33] = 658081404
        vehicles[34] = 353759425
        vehicles[35] = 897078296
        vehicles[36] = 904978235
        vehicles[37] = 1838233732
        vehicles[38] = 2193678947
        vehicles[39] = 1587191578
        vehicles[40] = 3371414360
        --FOR_MUS_302_69_PP_STOCK_1
        vehicles[41] = 1500183094
        vehicles[42] = 162166122
        vehicles[43] = 161538668
        vehicles[44] = 2191334224
        vehicles[45] = 3348852928
        vehicles[46] = 2138722167
        vehicles[47] = 3095976600
        vehicles[48] = 3713352339
        --NIS_240_ZG_71_PP_STOCK_1
        vehicles[49] = 1793448368
        vehicles[50] = 2680795434
        vehicles[51] = 1653183305
        vehicles[52] = 2107071804
        vehicles[53] = 174254050
        vehicles[54] = 2003942101
        vehicles[55] = 3056380666
        vehicles[56] = 2365200806
        --NIS_GTR_STK_73_PP_STOCK_1
        vehicles[57] = 3245189596
        vehicles[58] = 4154641755
        vehicles[59] = 1478693012
        vehicles[60] = 761082798
        vehicles[61] = 1526172372
        vehicles[62] = 432743829
        vehicles[63] = 612501851
        vehicles[64] = 1492908884
        --TOY_COR_STK_86_PP_STOCK_1
        vehicles[65] = 382914145
        vehicles[66] = 892817461
        vehicles[67] = 1541422759
        vehicles[68] = 4232320339
        vehicles[69] = 342451886
        vehicles[70] = 4001731402
        vehicles[71] = 2522207311
        vehicles[72] = 3729990700
        --VOL_GTI_MK1_76_PP_STOCK_1
        vehicles[73] = 470621649
        vehicles[74] = 3721885843
        vehicles[75] = 561262262
        vehicles[76] = 1446568855
        vehicles[77] = 3365712787
        vehicles[78] = 77381397
        vehicles[79] = 2733609224
        vehicles[80] = 3338495730
        --PON_FIR_STK_78_PP_STOCK_1
        vehicles[81] = 3681840500
        vehicles[82] = 3949993724
        vehicles[83] = 3350848715
        vehicles[84] = 2691382565
        vehicles[85] = 3379929237
        vehicles[86] = 2618823770
        vehicles[87] = 1034103769
        vehicles[88] = 4167471778
        --NIS_S14_A_97_PP_STOCK_1
        vehicles[89] = 2604553166
        vehicles[90] = 3874314692
        vehicles[91] = 2802420719
        vehicles[92] = 4170138417
        vehicles[93] = 1930173700
        vehicles[94] = 3322475057
        vehicles[95] = 4015386987
        vehicles[96] = 3345915973
        --AUD_UR_QUA_91_PP1V1
        vehicles[97] = 3430276423
        vehicles[98] = 525374202
        vehicles[99] = 2421831877
        vehicles[100] = 3639407362
        vehicles[101] = 3439650783
        vehicles[102] = 1437497350
        vehicles[103] = 2206765284
        vehicles[104] = 334309293
        --AUD_UR_QUA_91_PP2V1
        vehicles[105] = 1746276484
        vehicles[106] = 1897472721
        vehicles[107] = 1434221880
        vehicles[108] = 2930360105
        vehicles[109] = 3489959443
        vehicles[110] = 3919268643
        vehicles[111] = 3658714535
        vehicles[112] = 1219017437
        --BMW_M3_E30_90_PP1V1
        vehicles[113] = 1344878465
        vehicles[114] = 3222883691
        vehicles[115] = 2760522428
        vehicles[116] = 2441659885
        vehicles[117] = 1711657867
        vehicles[118] = 3386285552
        vehicles[119] = 2767762115
        vehicles[120] = 550353009
        --BMW_M3_E30_90_PP2V1
        vehicles[121] = 3822158826
        vehicles[122] = 1604073555
        vehicles[123] = 2716578068
        vehicles[124] = 123659843
        vehicles[125] = 3196185096
        vehicles[126] = 848354360
        vehicles[127] = 2031359819
        vehicles[128] = 3336543571
        --CHE_CAM_SS_67_PP1V1
        vehicles[129] = AOBtoDEC("3E B1 A7 B7")
        vehicles[130] = AOBtoDEC("83 B2 27 D6")
        vehicles[131] = AOBtoDEC("5E EF B4 C2")
        vehicles[132] = AOBtoDEC("F8 86 F5 9E")
        vehicles[133] = AOBtoDEC("61 44 58 2B")
        vehicles[134] = AOBtoDEC("DB 39 51 BA")
        vehicles[135] = AOBtoDEC("56 5D 05 9E")
        vehicles[136] = AOBtoDEC("66 DD B9 46")
        --CHE_CAM_SS_67_PP2V1
        vehicles[137] = AOBtoDEC("C4 3A 95 11")
        vehicles[138] = AOBtoDEC("BE 4E E8 76")
        vehicles[139] = AOBtoDEC("34 AD D8 EC")
        vehicles[140] = AOBtoDEC("43 A0 92 5E")
        vehicles[141] = AOBtoDEC("E4 9B 7D 21")
        vehicles[142] = AOBtoDEC("27 98 19 DD")
        vehicles[143] = AOBtoDEC("CF 88 F8 68")
        vehicles[144] = AOBtoDEC("1D 35 B4 12")
        --CHE_EL_CAM_70_PP1V1
        vehicles[145] = AOBtoDEC("3F 10 66 E7")
        vehicles[146] = AOBtoDEC("8A 99 3A 6F")
        vehicles[147] = AOBtoDEC("81 56 76 1A")
        vehicles[148] = AOBtoDEC("FC A1 4E AF")
        vehicles[149] = AOBtoDEC("9B 56 3D 30")
        vehicles[150] = AOBtoDEC("46 3A 3A E4")
        vehicles[151] = AOBtoDEC("96 18 B9 72")
        vehicles[152] = AOBtoDEC("C5 23 54 69")
        --CHE_EL_CAM_70_PP2V1
        vehicles[153] = AOBtoDEC("0D BC 59 E7")
        vehicles[154] = AOBtoDEC("FF A5 3E 6F")
        vehicles[155] = AOBtoDEC("DE 72 79 1A")
        vehicles[156] = AOBtoDEC("B3 92 3E AF")
        vehicles[157] = AOBtoDEC("E4 24 66 3D")
        vehicles[158] = AOBtoDEC("57 45 24 E4")
        vehicles[159] = AOBtoDEC("41 C5 C4 72")
        vehicles[160] = AOBtoDEC("FF 43 48 69")
        --DOD_CHA_RT_71_PP1V1
        vehicles[161] = AOBtoDEC("90 55 54 DB")
        vehicles[162] = AOBtoDEC("2C 8B A2 4A")
        vehicles[163] = AOBtoDEC("47 44 82 E8")
        vehicles[164] = AOBtoDEC("2C 8F 66 3F")
        vehicles[165] = AOBtoDEC("F0 27 43 C5")
        vehicles[166] = AOBtoDEC("21 BF CF 3C")
        vehicles[167] = AOBtoDEC("A9 58 13 9A")
        vehicles[168] = AOBtoDEC("BE 09 94 E7")
        --DOD_CHA_RT_71_PP2V1
        vehicles[169] = AOBtoDEC("67 A2 2D FB")
        vehicles[170] = AOBtoDEC("55 35 6F 7F")
        vehicles[171] = AOBtoDEC("97 30 AC D7")
        vehicles[172] = AOBtoDEC("6A 27 5B 0F")
        vehicles[173] = AOBtoDEC("BD DF FF 82")
        vehicles[174] = AOBtoDEC("D8 6E 35 6E")
        vehicles[175] = AOBtoDEC("2C 7F D2 AC")
        vehicles[176] = AOBtoDEC("43 0E AE B5")
        --FOR_MUS_302_69_PP1V1
        vehicles[177] = AOBtoDEC("67 42 63 3F")
        vehicles[178] = AOBtoDEC("08 37 D6 22")
        vehicles[179] = AOBtoDEC("D0 6B 43 26")
        vehicles[180] = AOBtoDEC("22 0C 9E 71")
        vehicles[181] = AOBtoDEC("F2 1E F2 65")
        vehicles[182] = AOBtoDEC("7D F7 A5 68")
        vehicles[183] = AOBtoDEC("6E 7F 78 56")
        vehicles[184] = AOBtoDEC("0A 74 5C E8")
        --FOR_MUS_302_69_PP2V1
        vehicles[185] = AOBtoDEC("A4 66 46 D5")
        vehicles[186] = AOBtoDEC("63 EB 74 C3")
        vehicles[187] = AOBtoDEC("03 46 F3 B1")
        vehicles[188] = AOBtoDEC("49 1D 02 9B")
        vehicles[189] = AOBtoDEC("30 DA C8 E3")
        vehicles[190] = AOBtoDEC("39 7D 83 76")
        vehicles[191] = AOBtoDEC("3E 2B 6E 55")
        vehicles[192] = AOBtoDEC("4E 9C 95 D9")
        --NIS_240_ZG_71_PP1V1
        vehicles[193] = AOBtoDEC("64 F8 F5 3C")
        vehicles[194] = AOBtoDEC("FF 90 DF AE")
        vehicles[195] = AOBtoDEC("09 91 99 0D")
        vehicles[196] = AOBtoDEC("28 09 E4 81")
        vehicles[197] = AOBtoDEC("05 63 A1 E4")
        vehicles[198] = AOBtoDEC("86 E4 CD 25")
        vehicles[199] = AOBtoDEC("1C 10 19 34")
        vehicles[200] = AOBtoDEC("C1 3F 75 F0")
        --NIS_240_ZG_71_PP2V1
        vehicles[201] = AOBtoDEC("B7 4D 4A 4E")
        vehicles[202] = AOBtoDEC("F6 CF 05 04")
        vehicles[203] = AOBtoDEC("75 79 76 AC")
        vehicles[204] = AOBtoDEC("D4 D8 8D C1")
        vehicles[205] = AOBtoDEC("AE 8F B2 D2")
        vehicles[206] = AOBtoDEC("AC BE 4A 65")
        vehicles[207] = AOBtoDEC("BC C1 B8 4D")
        vehicles[208] = AOBtoDEC("E4 D6 66 AF")
        --NIS_GTR_STK_73_PP1V1
        vehicles[209] = AOBtoDEC("73 16 C4 8B")
        vehicles[210] = AOBtoDEC("A6 FB D2 D3")
        vehicles[211] = AOBtoDEC("F2 8A A5 1A")
        vehicles[212] = AOBtoDEC("73 42 C5 A0")
        vehicles[213] = AOBtoDEC("64 7E 71 6E")
        vehicles[214] = AOBtoDEC("45 94 3F 96")
        vehicles[215] = AOBtoDEC("28 0A 94 C2")
        vehicles[216] = AOBtoDEC("47 3F 2E 1B")
        --NIS_GTR_STK_73_PP2V1
        vehicles[217] = AOBtoDEC("75 8C 0C 25")
        vehicles[218] = AOBtoDEC("FF 65 2B 2B")
        vehicles[219] = AOBtoDEC("8D 18 9C E8")
        vehicles[220] = AOBtoDEC("48 4D DB 47")
        vehicles[221] = AOBtoDEC("EB E6 23 54")
        vehicles[222] = AOBtoDEC("EA 0E 08 E1")
        vehicles[223] = AOBtoDEC("2C E8 CF 54")
        vehicles[224] = AOBtoDEC("7A D4 3A 7B")
        --TOY_COR_STK_86_PP1V1
        vehicles[225] = AOBtoDEC("0C F9 85 18")
        vehicles[226] = AOBtoDEC("68 22 AF 65")
        vehicles[227] = AOBtoDEC("72 0E 13 A7")
        vehicles[228] = AOBtoDEC("4C 8D 88 EA")
        vehicles[229] = AOBtoDEC("4C 1E E9 80")
        vehicles[230] = AOBtoDEC("83 A3 17 B5")
        vehicles[231] = AOBtoDEC("00 73 50 0B")
        vehicles[232] = AOBtoDEC("F6 33 0A 9C")
        --TOY_COR_STK_86_PP2V1
        vehicles[233] = AOBtoDEC("E3 02 92 7E")
        vehicles[234] = AOBtoDEC("C3 06 FC 92")
        vehicles[235] = AOBtoDEC("7C C1 A9 C3")
        vehicles[236] = AOBtoDEC("2B 98 76 AD")
        vehicles[237] = AOBtoDEC("F1 BA C6 E5")
        vehicles[238] = AOBtoDEC("71 72 C8 A3")
        vehicles[239] = AOBtoDEC("F7 84 3E 96")
        vehicles[240] = AOBtoDEC("70 03 78 FB")
        --VOL_GTI_MK1_76_PP1V1
        vehicles[241] = AOBtoDEC("85 28 CE EE")
        vehicles[242] = AOBtoDEC("E9 28 99 44")
        vehicles[243] = AOBtoDEC("7F BE 50 09")
        vehicles[244] = AOBtoDEC("97 FD F4 08")
        vehicles[245] = AOBtoDEC("46 9E CF 90")
        vehicles[246] = AOBtoDEC("87 BB 76 51")
        vehicles[247] = AOBtoDEC("0E 93 D8 83")
        vehicles[248] = AOBtoDEC("48 F6 53 0D")
        --VOL_GTI_MK1_76_PP2V1
        vehicles[249] = AOBtoDEC("5B C5 F5 FE")
        vehicles[250] = AOBtoDEC("DD AB 3F 90")
        vehicles[251] = AOBtoDEC("5A 98 72 17")
        vehicles[252] = AOBtoDEC("30 97 EF 42")
        vehicles[253] = AOBtoDEC("0D 2D BF 74")
        vehicles[254] = AOBtoDEC("58 EF A9 B2")
        vehicles[255] = AOBtoDEC("94 7C 3E 60")
        vehicles[256] = AOBtoDEC("76 3C 06 A5")
        --PON_FIR_STK_78_PP1V1
        vehicles[257] = AOBtoDEC("D9 57 CE C1")
        vehicles[258] = AOBtoDEC("E3 A5 8B AF")
        vehicles[259] = AOBtoDEC("FC DD D6 6D")
        vehicles[260] = AOBtoDEC("68 9E 4E 4E")
        vehicles[261] = AOBtoDEC("6A B0 D3 AC")
        vehicles[262] = AOBtoDEC("5C 6F 62 F7")
        vehicles[263] = AOBtoDEC("B5 FD 27 E4")
        vehicles[264] = AOBtoDEC("60 BA E2 95")
        --PON_FIR_STK_78_PP2V1
        vehicles[265] = AOBtoDEC("3D A5 9F 52")
        vehicles[266] = AOBtoDEC("AB 66 E3 AC")
        vehicles[267] = AOBtoDEC("5D 34 27 0C")
        vehicles[268] = AOBtoDEC("99 C1 3A 33")
        vehicles[269] = AOBtoDEC("8F FD 4E 32")
        vehicles[270] = AOBtoDEC("D9 46 22 B8")
        vehicles[271] = AOBtoDEC("0A DB AA E3")
        vehicles[272] = AOBtoDEC("1E 46 06 72")
        --NIS_S14_A_97_PP1V1
        vehicles[273] = AOBtoDEC("51 1E B7 49")
        vehicles[274] = AOBtoDEC("AE 9A 8D C4")
        vehicles[275] = AOBtoDEC("A5 0F 60 D6")
        vehicles[276] = AOBtoDEC("D6 01 9C AD")
        vehicles[277] = AOBtoDEC("F3 92 D1 1E")
        vehicles[278] = AOBtoDEC("62 8C 19 69")
        vehicles[279] = AOBtoDEC("53 92 BB 05")
        vehicles[280] = AOBtoDEC("64 82 E0 50")
        --NIS_S14_A_97_PP2V1
        vehicles[281] = AOBtoDEC("83 A4 15 0B")
        vehicles[282] = AOBtoDEC("FA EF 28 C0")
        vehicles[283] = AOBtoDEC("DE 69 17 78")
        vehicles[284] = AOBtoDEC("84 E4 1E CF")
        vehicles[285] = AOBtoDEC("FD 0D 8E 81")
        vehicles[286] = AOBtoDEC("63 2E 71 D8")
        vehicles[287] = AOBtoDEC("37 E9 F3 B0")
        vehicles[288] = AOBtoDEC("58 46 81 BD")
        --NIS_S14_A_97_PP3V1
        vehicles[289] = AOBtoDEC("ED F0 68 80")
        vehicles[290] = AOBtoDEC("89 20 98 BA")
        vehicles[291] = AOBtoDEC("C2 BF DA 39")
        vehicles[292] = AOBtoDEC("5F 79 9E 7F")
        vehicles[293] = AOBtoDEC("4A 11 2A 3D")
        vehicles[294] = AOBtoDEC("98 21 CE AB")
        vehicles[295] = AOBtoDEC("6A 0F 78 4B")
        vehicles[296] = AOBtoDEC("C8 3E 66 16")

        local  function my_random (t,from, to)
        local num = math.random (from, to)
        if t[num] then  num = my_random (t, from, to)  end
            t[num]=num
            return num
        end

        if readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3481124691 then
            first = "[[[[027A4F60]+14]+68]+10]+4"
            second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local array = {}
            local t = {}
            for i =1, 5 do
                X = my_random (t, 1, 296)
                array[i] = X
            end
            writeInteger(first,1891289054) --HIDDEN RIVAL
            writeInteger(second,vehicles[array[1]])
            writeInteger(third,vehicles[array[2]])
            writeInteger(fourth,vehicles[array[3]])
            writeInteger(fifth,vehicles[array[4]])
            writeInteger(sixth,vehicles[array[5]])
            if readInteger(first) == 1891289054 and
                readInteger(second) == vehicles[array[1]] and
                readInteger(third) == vehicles[array[2]] and
                readInteger(fourth) == vehicles[array[3]] and
                readInteger(fifth) == vehicles[array[4]] and
                readInteger(sixth) == vehicles[array[5]] then
                print "San Francisco Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 1014047533 then
            first = "[[[[027A4F60]+14]+68]+10]+4"
            second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            eigth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x38
            nineth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x40
            tenth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x48
            local array = {}
            local t = {}
            for i =1, 10 do
                X = my_random (t, 1, 296)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            writeInteger(eigth,vehicles[array[8]])
            writeInteger(nineth,vehicles[array[9]])
            writeInteger(tenth,vehicles[array[10]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] and
                readInteger(seventh) == vehicles[array[7]] and
                readInteger(eigth) == vehicles[array[8]] and
                readInteger(nineth) == vehicles[array[9]] and
                readInteger(tenth) == vehicles[array[10]] then
                print "Altamont Pass Race cars swap has completed successfully"
            end
        end
    end
end

s1 = createTimer(nil)
timer_onTimer(s1,Stage1)
timer_setInterval(s1, 500)
timer_setEnabled(s1, true)


[DISABLE]
timer_setEnabled(s1, false)
print "The Classics Run Tier 1 Cars Swap timer disabled"
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>789</ID>
          <Description>"Stage 2 3"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()
function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end
function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end
[ENABLE]
print "The Classics Run Tier 1 Cars Swap timer enabled"
function Stage23()
    if readPointer("[[[[027A4F60]+14]+68]+10]+4") ~= nil then
        local vehicles = {}
        --AUD_UR_QUA_91_PP_STOCK_1
        vehicles[1] = 2502726747
        vehicles[2] = 3073349389
        vehicles[3] = 143753977
        vehicles[4] = 4225561497
        vehicles[5] = 786735054
        vehicles[6] = 974677243
        vehicles[7] = 1071177696
        vehicles[8] = 1589944205
        --BMW_M3_E30_90_PP_STOCK_1
        vehicles[9] = 1719691339
        vehicles[10] = 4277695769
        vehicles[11] = 27874341
        vehicles[12] = 4078634043
        vehicles[13] = 2966784590
        vehicles[14] = 3817400829
        vehicles[15] = 308716637
        vehicles[16] = 3301497845
        --CHE_CAM_SS_67_PP_STOCK_1
        vehicles[17] = 1522441908
        vehicles[18] = 150155535
        vehicles[19] = 4047731096
        vehicles[20] = 3603434424
        vehicles[21] = 933904526
        vehicles[22] = 1760866290
        vehicles[23] = 1935511816
        vehicles[24] = 3986269571
        --CHE_EL_CAM_70_PP_STOCK_1
        vehicles[25] = 4152999272
        vehicles[26] = 2839316226
        vehicles[27] = 850809204
        vehicles[28] = 1507013332
        vehicles[29] = 2744598914
        vehicles[30] = 874261196
        vehicles[31] = 1489277057
        vehicles[32] = 3963367876
        --DOD_CHA_RT_71_PP_STOCK_1
        vehicles[33] = 658081404
        vehicles[34] = 353759425
        vehicles[35] = 897078296
        vehicles[36] = 904978235
        vehicles[37] = 1838233732
        vehicles[38] = 2193678947
        vehicles[39] = 1587191578
        vehicles[40] = 3371414360
        --FOR_MUS_302_69_PP_STOCK_1
        vehicles[41] = 1500183094
        vehicles[42] = 162166122
        vehicles[43] = 161538668
        vehicles[44] = 2191334224
        vehicles[45] = 3348852928
        vehicles[46] = 2138722167
        vehicles[47] = 3095976600
        vehicles[48] = 3713352339
        --NIS_240_ZG_71_PP_STOCK_1
        vehicles[49] = 1793448368
        vehicles[50] = 2680795434
        vehicles[51] = 1653183305
        vehicles[52] = 2107071804
        vehicles[53] = 174254050
        vehicles[54] = 2003942101
        vehicles[55] = 3056380666
        vehicles[56] = 2365200806
        --NIS_GTR_STK_73_PP_STOCK_1
        vehicles[57] = 3245189596
        vehicles[58] = 4154641755
        vehicles[59] = 1478693012
        vehicles[60] = 761082798
        vehicles[61] = 1526172372
        vehicles[62] = 432743829
        vehicles[63] = 612501851
        vehicles[64] = 1492908884
        --TOY_COR_STK_86_PP_STOCK_1
        vehicles[65] = 382914145
        vehicles[66] = 892817461
        vehicles[67] = 1541422759
        vehicles[68] = 4232320339
        vehicles[69] = 342451886
        vehicles[70] = 4001731402
        vehicles[71] = 2522207311
        vehicles[72] = 3729990700
        --VOL_GTI_MK1_76_PP_STOCK_1
        vehicles[73] = 470621649
        vehicles[74] = 3721885843
        vehicles[75] = 561262262
        vehicles[76] = 1446568855
        vehicles[77] = 3365712787
        vehicles[78] = 77381397
        vehicles[79] = 2733609224
        vehicles[80] = 3338495730
        --PON_FIR_STK_78_PP_STOCK_1
        vehicles[81] = 3681840500
        vehicles[82] = 3949993724
        vehicles[83] = 3350848715
        vehicles[84] = 2691382565
        vehicles[85] = 3379929237
        vehicles[86] = 2618823770
        vehicles[87] = 1034103769
        vehicles[88] = 4167471778
        --NIS_S14_A_97_PP_STOCK_1
        vehicles[89] = 2604553166
        vehicles[90] = 3874314692
        vehicles[91] = 2802420719
        vehicles[92] = 4170138417
        vehicles[93] = 1930173700
        vehicles[94] = 3322475057
        vehicles[95] = 4015386987
        vehicles[96] = 3345915973
        --AUD_UR_QUA_91_PP1V1
        vehicles[97] = 3430276423
        vehicles[98] = 525374202
        vehicles[99] = 2421831877
        vehicles[100] = 3639407362
        vehicles[101] = 3439650783
        vehicles[102] = 1437497350
        vehicles[103] = 2206765284
        vehicles[104] = 334309293
        --AUD_UR_QUA_91_PP2V1
        vehicles[105] = 1746276484
        vehicles[106] = 1897472721
        vehicles[107] = 1434221880
        vehicles[108] = 2930360105
        vehicles[109] = 3489959443
        vehicles[110] = 3919268643
        vehicles[111] = 3658714535
        vehicles[112] = 1219017437
        --BMW_M3_E30_90_PP1V1
        vehicles[113] = 1344878465
        vehicles[114] = 3222883691
        vehicles[115] = 2760522428
        vehicles[116] = 2441659885
        vehicles[117] = 1711657867
        vehicles[118] = 3386285552
        vehicles[119] = 2767762115
        vehicles[120] = 550353009
        --BMW_M3_E30_90_PP2V1
        vehicles[121] = 3822158826
        vehicles[122] = 1604073555
        vehicles[123] = 2716578068
        vehicles[124] = 123659843
        vehicles[125] = 3196185096
        vehicles[126] = 848354360
        vehicles[127] = 2031359819
        vehicles[128] = 3336543571
        --CHE_CAM_SS_67_PP1V1
        vehicles[129] = AOBtoDEC("3E B1 A7 B7")
        vehicles[130] = AOBtoDEC("83 B2 27 D6")
        vehicles[131] = AOBtoDEC("5E EF B4 C2")
        vehicles[132] = AOBtoDEC("F8 86 F5 9E")
        vehicles[133] = AOBtoDEC("61 44 58 2B")
        vehicles[134] = AOBtoDEC("DB 39 51 BA")
        vehicles[135] = AOBtoDEC("56 5D 05 9E")
        vehicles[136] = AOBtoDEC("66 DD B9 46")
        --CHE_CAM_SS_67_PP2V1
        vehicles[137] = AOBtoDEC("C4 3A 95 11")
        vehicles[138] = AOBtoDEC("BE 4E E8 76")
        vehicles[139] = AOBtoDEC("34 AD D8 EC")
        vehicles[140] = AOBtoDEC("43 A0 92 5E")
        vehicles[141] = AOBtoDEC("E4 9B 7D 21")
        vehicles[142] = AOBtoDEC("27 98 19 DD")
        vehicles[143] = AOBtoDEC("CF 88 F8 68")
        vehicles[144] = AOBtoDEC("1D 35 B4 12")
        --CHE_EL_CAM_70_PP1V1
        vehicles[145] = AOBtoDEC("3F 10 66 E7")
        vehicles[146] = AOBtoDEC("8A 99 3A 6F")
        vehicles[147] = AOBtoDEC("81 56 76 1A")
        vehicles[148] = AOBtoDEC("FC A1 4E AF")
        vehicles[149] = AOBtoDEC("9B 56 3D 30")
        vehicles[150] = AOBtoDEC("46 3A 3A E4")
        vehicles[151] = AOBtoDEC("96 18 B9 72")
        vehicles[152] = AOBtoDEC("C5 23 54 69")
        --CHE_EL_CAM_70_PP2V1
        vehicles[153] = AOBtoDEC("0D BC 59 E7")
        vehicles[154] = AOBtoDEC("FF A5 3E 6F")
        vehicles[155] = AOBtoDEC("DE 72 79 1A")
        vehicles[156] = AOBtoDEC("B3 92 3E AF")
        vehicles[157] = AOBtoDEC("E4 24 66 3D")
        vehicles[158] = AOBtoDEC("57 45 24 E4")
        vehicles[159] = AOBtoDEC("41 C5 C4 72")
        vehicles[160] = AOBtoDEC("FF 43 48 69")
        --DOD_CHA_RT_71_PP1V1
        vehicles[161] = AOBtoDEC("90 55 54 DB")
        vehicles[162] = AOBtoDEC("2C 8B A2 4A")
        vehicles[163] = AOBtoDEC("47 44 82 E8")
        vehicles[164] = AOBtoDEC("2C 8F 66 3F")
        vehicles[165] = AOBtoDEC("F0 27 43 C5")
        vehicles[166] = AOBtoDEC("21 BF CF 3C")
        vehicles[167] = AOBtoDEC("A9 58 13 9A")
        vehicles[168] = AOBtoDEC("BE 09 94 E7")
        --DOD_CHA_RT_71_PP2V1
        vehicles[169] = AOBtoDEC("67 A2 2D FB")
        vehicles[170] = AOBtoDEC("55 35 6F 7F")
        vehicles[171] = AOBtoDEC("97 30 AC D7")
        vehicles[172] = AOBtoDEC("6A 27 5B 0F")
        vehicles[173] = AOBtoDEC("BD DF FF 82")
        vehicles[174] = AOBtoDEC("D8 6E 35 6E")
        vehicles[175] = AOBtoDEC("2C 7F D2 AC")
        vehicles[176] = AOBtoDEC("43 0E AE B5")
        --FOR_MUS_302_69_PP1V1
        vehicles[177] = AOBtoDEC("67 42 63 3F")
        vehicles[178] = AOBtoDEC("08 37 D6 22")
        vehicles[179] = AOBtoDEC("D0 6B 43 26")
        vehicles[180] = AOBtoDEC("22 0C 9E 71")
        vehicles[181] = AOBtoDEC("F2 1E F2 65")
        vehicles[182] = AOBtoDEC("7D F7 A5 68")
        vehicles[183] = AOBtoDEC("6E 7F 78 56")
        vehicles[184] = AOBtoDEC("0A 74 5C E8")
        --FOR_MUS_302_69_PP2V1
        vehicles[185] = AOBtoDEC("A4 66 46 D5")
        vehicles[186] = AOBtoDEC("63 EB 74 C3")
        vehicles[187] = AOBtoDEC("03 46 F3 B1")
        vehicles[188] = AOBtoDEC("49 1D 02 9B")
        vehicles[189] = AOBtoDEC("30 DA C8 E3")
        vehicles[190] = AOBtoDEC("39 7D 83 76")
        vehicles[191] = AOBtoDEC("3E 2B 6E 55")
        vehicles[192] = AOBtoDEC("4E 9C 95 D9")
        --NIS_240_ZG_71_PP1V1
        vehicles[193] = AOBtoDEC("64 F8 F5 3C")
        vehicles[194] = AOBtoDEC("FF 90 DF AE")
        vehicles[195] = AOBtoDEC("09 91 99 0D")
        vehicles[196] = AOBtoDEC("28 09 E4 81")
        vehicles[197] = AOBtoDEC("05 63 A1 E4")
        vehicles[198] = AOBtoDEC("86 E4 CD 25")
        vehicles[199] = AOBtoDEC("1C 10 19 34")
        vehicles[200] = AOBtoDEC("C1 3F 75 F0")
        --NIS_240_ZG_71_PP2V1
        vehicles[201] = AOBtoDEC("B7 4D 4A 4E")
        vehicles[202] = AOBtoDEC("F6 CF 05 04")
        vehicles[203] = AOBtoDEC("75 79 76 AC")
        vehicles[204] = AOBtoDEC("D4 D8 8D C1")
        vehicles[205] = AOBtoDEC("AE 8F B2 D2")
        vehicles[206] = AOBtoDEC("AC BE 4A 65")
        vehicles[207] = AOBtoDEC("BC C1 B8 4D")
        vehicles[208] = AOBtoDEC("E4 D6 66 AF")
        --NIS_GTR_STK_73_PP1V1
        vehicles[209] = AOBtoDEC("73 16 C4 8B")
        vehicles[210] = AOBtoDEC("A6 FB D2 D3")
        vehicles[211] = AOBtoDEC("F2 8A A5 1A")
        vehicles[212] = AOBtoDEC("73 42 C5 A0")
        vehicles[213] = AOBtoDEC("64 7E 71 6E")
        vehicles[214] = AOBtoDEC("45 94 3F 96")
        vehicles[215] = AOBtoDEC("28 0A 94 C2")
        vehicles[216] = AOBtoDEC("47 3F 2E 1B")
        --NIS_GTR_STK_73_PP2V1
        vehicles[217] = AOBtoDEC("75 8C 0C 25")
        vehicles[218] = AOBtoDEC("FF 65 2B 2B")
        vehicles[219] = AOBtoDEC("8D 18 9C E8")
        vehicles[220] = AOBtoDEC("48 4D DB 47")
        vehicles[221] = AOBtoDEC("EB E6 23 54")
        vehicles[222] = AOBtoDEC("EA 0E 08 E1")
        vehicles[223] = AOBtoDEC("2C E8 CF 54")
        vehicles[224] = AOBtoDEC("7A D4 3A 7B")
        --TOY_COR_STK_86_PP1V1
        vehicles[225] = AOBtoDEC("0C F9 85 18")
        vehicles[226] = AOBtoDEC("68 22 AF 65")
        vehicles[227] = AOBtoDEC("72 0E 13 A7")
        vehicles[228] = AOBtoDEC("4C 8D 88 EA")
        vehicles[229] = AOBtoDEC("4C 1E E9 80")
        vehicles[230] = AOBtoDEC("83 A3 17 B5")
        vehicles[231] = AOBtoDEC("00 73 50 0B")
        vehicles[232] = AOBtoDEC("F6 33 0A 9C")
        --TOY_COR_STK_86_PP2V1
        vehicles[233] = AOBtoDEC("E3 02 92 7E")
        vehicles[234] = AOBtoDEC("C3 06 FC 92")
        vehicles[235] = AOBtoDEC("7C C1 A9 C3")
        vehicles[236] = AOBtoDEC("2B 98 76 AD")
        vehicles[237] = AOBtoDEC("F1 BA C6 E5")
        vehicles[238] = AOBtoDEC("71 72 C8 A3")
        vehicles[239] = AOBtoDEC("F7 84 3E 96")
        vehicles[240] = AOBtoDEC("70 03 78 FB")
        --VOL_GTI_MK1_76_PP1V1
        vehicles[241] = AOBtoDEC("85 28 CE EE")
        vehicles[242] = AOBtoDEC("E9 28 99 44")
        vehicles[243] = AOBtoDEC("7F BE 50 09")
        vehicles[244] = AOBtoDEC("97 FD F4 08")
        vehicles[245] = AOBtoDEC("46 9E CF 90")
        vehicles[246] = AOBtoDEC("87 BB 76 51")
        vehicles[247] = AOBtoDEC("0E 93 D8 83")
        vehicles[248] = AOBtoDEC("48 F6 53 0D")
        --VOL_GTI_MK1_76_PP2V1
        vehicles[249] = AOBtoDEC("5B C5 F5 FE")
        vehicles[250] = AOBtoDEC("DD AB 3F 90")
        vehicles[251] = AOBtoDEC("5A 98 72 17")
        vehicles[252] = AOBtoDEC("30 97 EF 42")
        vehicles[253] = AOBtoDEC("0D 2D BF 74")
        vehicles[254] = AOBtoDEC("58 EF A9 B2")
        vehicles[255] = AOBtoDEC("94 7C 3E 60")
        vehicles[256] = AOBtoDEC("76 3C 06 A5")
        --PON_FIR_STK_78_PP1V1
        vehicles[257] = AOBtoDEC("D9 57 CE C1")
        vehicles[258] = AOBtoDEC("E3 A5 8B AF")
        vehicles[259] = AOBtoDEC("FC DD D6 6D")
        vehicles[260] = AOBtoDEC("68 9E 4E 4E")
        vehicles[261] = AOBtoDEC("6A B0 D3 AC")
        vehicles[262] = AOBtoDEC("5C 6F 62 F7")
        vehicles[263] = AOBtoDEC("B5 FD 27 E4")
        vehicles[264] = AOBtoDEC("60 BA E2 95")
        --PON_FIR_STK_78_PP2V1
        vehicles[265] = AOBtoDEC("3D A5 9F 52")
        vehicles[266] = AOBtoDEC("AB 66 E3 AC")
        vehicles[267] = AOBtoDEC("5D 34 27 0C")
        vehicles[268] = AOBtoDEC("99 C1 3A 33")
        vehicles[269] = AOBtoDEC("8F FD 4E 32")
        vehicles[270] = AOBtoDEC("D9 46 22 B8")
        vehicles[271] = AOBtoDEC("0A DB AA E3")
        vehicles[272] = AOBtoDEC("1E 46 06 72")
        --NIS_S14_A_97_PP1V1
        vehicles[273] = AOBtoDEC("51 1E B7 49")
        vehicles[274] = AOBtoDEC("AE 9A 8D C4")
        vehicles[275] = AOBtoDEC("A5 0F 60 D6")
        vehicles[276] = AOBtoDEC("D6 01 9C AD")
        vehicles[277] = AOBtoDEC("F3 92 D1 1E")
        vehicles[278] = AOBtoDEC("62 8C 19 69")
        vehicles[279] = AOBtoDEC("53 92 BB 05")
        vehicles[280] = AOBtoDEC("64 82 E0 50")
        --NIS_S14_A_97_PP2V1
        vehicles[281] = AOBtoDEC("83 A4 15 0B")
        vehicles[282] = AOBtoDEC("FA EF 28 C0")
        vehicles[283] = AOBtoDEC("DE 69 17 78")
        vehicles[284] = AOBtoDEC("84 E4 1E CF")
        vehicles[285] = AOBtoDEC("FD 0D 8E 81")
        vehicles[286] = AOBtoDEC("63 2E 71 D8")
        vehicles[287] = AOBtoDEC("37 E9 F3 B0")
        vehicles[288] = AOBtoDEC("58 46 81 BD")
        --NIS_S14_A_97_PP3V1
        vehicles[289] = AOBtoDEC("ED F0 68 80")
        vehicles[290] = AOBtoDEC("89 20 98 BA")
        vehicles[291] = AOBtoDEC("C2 BF DA 39")
        vehicles[292] = AOBtoDEC("5F 79 9E 7F")
        vehicles[293] = AOBtoDEC("4A 11 2A 3D")
        vehicles[294] = AOBtoDEC("98 21 CE AB")
        vehicles[295] = AOBtoDEC("6A 0F 78 4B")
        vehicles[296] = AOBtoDEC("C8 3E 66 16")
        --MAZ_RX7_RZ_98_PP_STOCK_1
        vehicles[297] = AOBtoDEC("D6 73 70 47")
        vehicles[298] = AOBtoDEC("1E 52 BB 6B")
        vehicles[299] = AOBtoDEC("E1 3B 0F 52")
        vehicles[300] = AOBtoDEC("D6 4B BC AB")
        vehicles[301] = AOBtoDEC("3D BC A7 5E")
        vehicles[302] = AOBtoDEC("4A DF E7 71")
        vehicles[303] = AOBtoDEC("61 02 DA E1")
        vehicles[304] = AOBtoDEC("EF CF 52 7E")
        --MAZ_RX7_RZ_98_PP1V1
        vehicles[305] = AOBtoDEC("FB 72 A5 FD")
        vehicles[306] = AOBtoDEC("64 FB FC 5A")
        vehicles[307] = AOBtoDEC("D9 11 73 09")
        vehicles[308] = AOBtoDEC("17 37 73 AC")
        vehicles[309] = AOBtoDEC("B1 58 8C D1")
        vehicles[310] = AOBtoDEC("1F 50 F4 2D")
        vehicles[311] = AOBtoDEC("7F 6D 90 28")
        vehicles[312] = AOBtoDEC("D4 52 C2 7D")
        --MAZ_RX7_RZ_98_PP2V1
        vehicles[313] = AOBtoDEC("5A 29 48 DF")
        vehicles[314] = AOBtoDEC("11 EC D1 D9")
        vehicles[315] = AOBtoDEC("A5 DF 94 5A")
        vehicles[316] = AOBtoDEC("E5 AE DF 00")
        vehicles[317] = AOBtoDEC("B8 0F 2B B0")
        vehicles[318] = AOBtoDEC("78 B9 DC 68")
        vehicles[319] = AOBtoDEC("04 0E 7A F3")
        vehicles[320] = AOBtoDEC("1D FE 8D A3")
        --MAZ_RX7_RZ_98_PP3V1
        vehicles[321] = AOBtoDEC("54 CB 2F E6")
        vehicles[322] = AOBtoDEC("40 39 F6 A5")
        vehicles[323] = AOBtoDEC("74 B3 75 1B")
        vehicles[324] = AOBtoDEC("7F 8E 19 AA")
        vehicles[325] = AOBtoDEC("4F 5C 13 A1")
        vehicles[326] = AOBtoDEC("A9 71 09 FE")
        vehicles[327] = AOBtoDEC("1C 0D A4 0D")
        vehicles[328] = AOBtoDEC("FD 29 D1 1F")
        --NIS_GTR_R32_91_STOCK_1
        vehicles[329] = AOBtoDEC("F2 36 B4 DB")
        vehicles[330] = AOBtoDEC("81 BD 1B DC")
        vehicles[331] = AOBtoDEC("AC D3 7C D9")
        vehicles[332] = AOBtoDEC("4C 59 13 D9")
        vehicles[333] = AOBtoDEC("6D 46 A0 15")
        vehicles[334] = AOBtoDEC("FB FE 4A 8D")
        vehicles[335] = AOBtoDEC("F3 F0 86 90")
        vehicles[336] = AOBtoDEC("C0 11 52 8F")
        --NIS_GTR_R32_91_PP1V1
        vehicles[337] = AOBtoDEC("BD C7 46 06")
        vehicles[338] = AOBtoDEC("05 B8 95 B0")
        vehicles[339] = AOBtoDEC("0B AA 36 FA")
        vehicles[340] = AOBtoDEC("59 8B BF 17")
        vehicles[341] = AOBtoDEC("80 60 83 C8")
        vehicles[342] = AOBtoDEC("71 59 BB 02")
        vehicles[343] = AOBtoDEC("F9 78 6C F9")
        vehicles[344] = AOBtoDEC("9B F2 1E FF")
        --NIS_GTR_R32_91_PP2V1
        vehicles[345] = AOBtoDEC("36 15 DB 47")
        vehicles[346] = AOBtoDEC("49 3C 12 4D")
        vehicles[347] = AOBtoDEC("F5 0C BA 4B")
        vehicles[348] = AOBtoDEC("AB 36 F7 6C")
        vehicles[349] = AOBtoDEC("C7 3A 89 63")
        vehicles[350] = AOBtoDEC("40 40 7B 72")
        vehicles[351] = AOBtoDEC("31 59 A1 B5")
        vehicles[352] = AOBtoDEC("C3 91 4F A6")
        --TOY_SUP_STK_98_PP_STOCK_1
        vehicles[353] = AOBtoDEC("32 1F 4E 6A")
        vehicles[354] = AOBtoDEC("9F 1A 05 F9")
        vehicles[355] = AOBtoDEC("BF A4 2C 7E")
        vehicles[356] = AOBtoDEC("78 6F E1 31")
        vehicles[357] = AOBtoDEC("45 2A 33 71")
        vehicles[358] = AOBtoDEC("B8 98 9B 6A")
        vehicles[359] = AOBtoDEC("BE 64 BC 6D")
        vehicles[360] = AOBtoDEC("E5 5E 41 E8")
        --TOY_SUP_STK_98_PP1V1
        vehicles[361] = AOBtoDEC("5F E9 3D E8")
        vehicles[362] = AOBtoDEC("70 BC 94 74")
        vehicles[363] = AOBtoDEC("29 39 75 6D")
        vehicles[364] = AOBtoDEC("85 9E BC F8")
        vehicles[365] = AOBtoDEC("0A B6 5F B1")
        vehicles[366] = AOBtoDEC("F8 32 F6 11")
        vehicles[367] = AOBtoDEC("8C 90 30 92")
        vehicles[368] = AOBtoDEC("DC D3 82 39")
        --TOY_SUP_STK_98_PP2V1
        vehicles[369] = AOBtoDEC("47 2F B8 9B")
        vehicles[370] = AOBtoDEC("36 D4 64 53")
        vehicles[371] = AOBtoDEC("6E E9 E1 4F")
        vehicles[372] = AOBtoDEC("F2 C2 51 C7")
        vehicles[373] = AOBtoDEC("0D 4C 5E D8")
        vehicles[374] = AOBtoDEC("2A 7B FD B0")
        vehicles[375] = AOBtoDEC("64 87 38 9C")
        vehicles[376] = AOBtoDEC("D2 24 C7 65")
        --TOY_SUP_STK_98_PP3V1
        vehicles[377] = AOBtoDEC("BB C2 32 50")
        vehicles[378] = AOBtoDEC("F3 D0 81 90")
        vehicles[379] = AOBtoDEC("13 56 9F 15")
        vehicles[380] = AOBtoDEC("D0 49 5C 28")
        vehicles[381] = AOBtoDEC("54 57 ED 77")
        vehicles[382] = AOBtoDEC("22 DE 90 CF")
        vehicles[383] = AOBtoDEC("83 A6 DE 57")
        vehicles[384] = AOBtoDEC("4C 66 2D 73")

        local  function my_random (t,from, to)
        local num = math.random (from, to)
        if t[num] then  num = my_random (t, from, to)  end
            t[num]=num
            return num
        end

        if readInteger("[[[[027A4F60]+14]+68]+10]+4") == 96674846 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            local eigth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x38
            local array = {}
            local t = {}
            for i =1, 8 do
                X = my_random (t, 1, 384)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            writeInteger(eigth,vehicles[array[8]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] and
                readInteger(seventh) == vehicles[array[7]] and
                readInteger(eigth) == vehicles[array[8]] then
                print "Yosemite Approach A Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 2360253972 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            local eigth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x38
            local array = {}
            local t = {}
            for i =1, 8 do
                X = my_random (t, 1, 384)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            writeInteger(eigth,vehicles[array[8]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] and
                readInteger(seventh) == vehicles[array[7]] and
                readInteger(eigth) == vehicles[array[8]] then
                print "Yosemite South A Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 2463598039 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local array = {}
            local t = {}
            for i =1, 6 do
                X = my_random (t, 1, 384)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]]) --WE MAKE MARCUS DISAPPEAR FROM THE RACE SINCE HE IS IRRELEVANT
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] then
                print "Yosemite South B Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 1390273791 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local array = {}
            local t = {}
            for i =1, 3 do
                X = my_random (t, 1, 384)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] then
                print "Sierra Pass Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 2940168599 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            local eigth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x38
            local nineth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x40
            local tenth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x48
            local array = {}
            local t = {}
            for i =1, 10 do
                X = my_random (t, 1, 384)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            writeInteger(eigth,vehicles[array[8]])
            writeInteger(nineth,vehicles[array[9]])
            writeInteger(tenth,vehicles[array[10]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] and
                readInteger(seventh) == vehicles[array[7]] and
                readInteger(eigth) == vehicles[array[8]] and
                readInteger(nineth) == vehicles[array[9]] and
                readInteger(tenth) == vehicles[array[10]] then
                print "Desert Hills Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 1161287153 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local array = {}
            local t = {}
            for i =1, 3 do
                X = my_random (t, 1, 384)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] then
                print "Death Valley A Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3489511903 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            local eigth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x38
            local array = {}
            local t = {}
            for i =1, 8 do
                X = my_random (t, 1, 384)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            writeInteger(eigth,vehicles[array[8]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] and
                readInteger(seventh) == vehicles[array[7]] and
                readInteger(eigth) == vehicles[array[8]] then
                print "Death Valley B Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 4225104048 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            writeInteger(first,3846084678)
            writeInteger(second,2463598039)
            if readInteger(first) == 3846084678 and
                readInteger(second) == 2463598039 then
                print "Las Vegas East A Battle Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 246197794 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            local eigth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x38
            local nineth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x40
            local tenth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x48
            local array = {}
            local t = {}
            for i =1, 10 do
                X = my_random (t, 1, 384)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            writeInteger(eigth,vehicles[array[8]])
            writeInteger(nineth,vehicles[array[9]])
            writeInteger(tenth,vehicles[array[10]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] and
                readInteger(seventh) == vehicles[array[7]] and
                readInteger(eigth) == vehicles[array[8]] and
                readInteger(nineth) == vehicles[array[9]] and
                readInteger(tenth) == vehicles[array[10]] then
                print "Las Vegas East B Race cars swap has completed successfully"
            end
        end
    end
end

s23 = createTimer(nil)
timer_onTimer(s23,Stage23)
timer_setInterval(s23, 500)
timer_setEnabled(s23, true)


[DISABLE]
timer_setEnabled(s23, false)
print "The Classics Run Tier 1 &amp; 2 Cars Swap timer disabled"
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>821</ID>
          <Description>"Stage 4 9"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()
function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end
function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end
[ENABLE]
print "The Classics Run Cars Swap Stage 4 to 9 timer enabled"
function Stage49()
    if readPointer("[[[[027A4F60]+14]+68]+10]+4") ~= nil then
        if readPointer("[[[[00AA71F4]+F8]+6E8]+28]+58") ~= nil and
            readInteger("[[[[00AA71F4]+F8]+6E8]+28]+58") == 3090365568 then
            writeInteger("[[[[00AA71F4]+F8]+6E8]+28]+58",2763179715)
        end
        local vehicles = {}
        --SHE_DAY_COU_65_PP_STOCK_1
        vehicles[1] = 4152129083
        vehicles[2] = 3871257759
        vehicles[3] = 3289542481
        vehicles[4] = 2461231717
        vehicles[5] = 881791887
        vehicles[6] = 878544792
        vehicles[7] = 2902527303
        vehicles[8] = 1636074729
        --LAM_COU_QV_85_PP_STOCK_1
        vehicles[9] = 2031156362
        vehicles[10] = 2296894266
        vehicles[11] = 2397773668
        vehicles[12] = 1816534390
        vehicles[13] = 2772598421
        vehicles[14] = 579118439
        vehicles[15] = 3429219263
        vehicles[16] = 419023887
        --LAM_MIU_SV_71_PP_STOCK_1
        vehicles[17] = 3003939881
        vehicles[18] = 612152928
        vehicles[19] = 3568574533
        vehicles[20] = 99186252
        vehicles[21] = 3952549375
        vehicles[22] = 2426551597
        vehicles[23] = 4214968814
        vehicles[24] = 3035759228
        --AUD_UR_QUA_91_AI_T4
        vehicles[25] = 3418979519
        vehicles[26] = 2360253972
        vehicles[27] = 3953285671
        vehicles[28] = 1878717712
        --BMW_M3_E30_90_AI_T4
        vehicles[29] = 3965047869
        vehicles[30] = 3000683173
        vehicles[31] = 3508062179
        vehicles[32] = 771405773
        vehicles[33] = 3867369482
        --CHE_EL_CAM_70_AI_T4
        vehicles[34] = 2053301536
        vehicles[35] = 96789362
        vehicles[36] = 3083222042
        vehicles[37] = 3822410543
        vehicles[38] = 585575516
        vehicles[39] = 3393955391
        vehicles[40] = 3643384219
        vehicles[41] = 3169722097
        --CHE_CAM_SS_67_AI_T4
        vehicles[42] = 1925569773
        vehicles[43] = 145181003
        vehicles[44] = 2789574667
        vehicles[45] = 2695468121
        vehicles[46] = 2955493261
        vehicles[47] = 1157837898
        --DOD_CHA_RT_71_AI_T4
        vehicles[48] = 1013798201
        vehicles[49] = 132446852
        vehicles[50] = 1161287153
        vehicles[51] = 1894368909
        vehicles[52] = 3481124691
        vehicles[53] = 1350671612
        --FOR_MUS_302_69_AI_T4
        vehicles[54] = 28547989
        vehicles[55] = 3592138099
        vehicles[56] = 659679187
        vehicles[57] = 1106812868
        --LAM_COU_QV_85_PP1V1
        vehicles[58] = 1172103469
        vehicles[59] = 2451355498
        vehicles[60] = 2781095708
        vehicles[61] = 3467847697
        vehicles[62] = 1593723259
        vehicles[63] = 3047790893
        vehicles[64] = 3597627020
        vehicles[65] = 548968206
        --LAM_MIU_SV_71_PP1V1
        vehicles[66] = 449922857
        vehicles[67] = 4242903619
        vehicles[68] = 1609165300
        vehicles[69] = 3027612684
        vehicles[70] = 1768772733
        vehicles[71] = 832958932
        vehicles[72] = 2753149200
        vehicles[73] = 3199068950
        --LAM_MIU_SV_71_PP2V1
        vehicles[74] = 2582372124
        vehicles[75] = 3880454276
        vehicles[76] = 2557124909
        vehicles[77] = 3136923186
        vehicles[78] = 1610683479
        vehicles[79] = 3124745874
        vehicles[80] = 2281179148
        vehicles[81] = 2653079979
        --LAM_MIU_SV_71_AI_T4
        vehicles[82] = 2615959382
        vehicles[83] = 246197794
        vehicles[84] = 3193857785
        vehicles[85] = 3908753765
        vehicles[86] = 3339108312
        --NIS_240_ZG_71_AI_T4
        vehicles[87] = 2003853787
        vehicles[88] = 2155992723
        vehicles[89] = 4004575680
        vehicles[90] = 2335272314
        vehicles[91] = 1491506845
        --POR_993_GT2_96_E3
        vehicles[92] = AOBtoDEC("8A 96 3A 36")
        --NIS_GTR_STK_73_AI_T4
        vehicles[93] = 1473954276
        vehicles[94] = 1553591204
        --SHE_DAY_COU_65_AI_T4
        vehicles[95] = 3357183898
        vehicles[96] = 232325685
        vehicles[97] = 3312278586
        vehicles[98] = 1201503826
        --TOY_COR_STK_86_AI_T4
        vehicles[99] = 1287845648
        vehicles[100] = 2128429859
        vehicles[101] = 2927791046
        --VOL_GTI_MK1_76_AI_T4
        vehicles[102] = 1840926221
        vehicles[103] = 2539886783
        vehicles[104] = 986928949
        vehicles[105] = 2613494165
        vehicles[106] = 2089443610
        vehicles[107] = 1339518974
        vehicles[108] = 3069328390
        --BMW_M3_E30_90_NFS_E
        vehicles[109] = 143156729
        --CHE_CAM_SS_67_NFS_E
        vehicles[110] = 764119014
        --CHE_EL_CAM_70_NFS_E
        vehicles[111] = 3006189287
        --DOD_CHA_RT_71_NFS_E
        vehicles[112] = 531246253
        --FOR_MUS_302_69_ADSALES_1
        vehicles[113] = 268766097
        --FOR_MUS_302_69_NFS_E
        vehicles[114] = 2902452387
        --NIS_240_ZG_71_MARKETING_1
        vehicles[115] = 3001286456
        --NIS_240_ZG_71_PP_RUN
        vehicles[116] = 2581711499
        --SHE_DAY_COU_65_PP_RUN
        vehicles[117] = 3604153451
        --VOL_GTI_MK1_76_NFS_E
        vehicles[118] = 1901714060
        --NIS_GTR_STK_73_NFS_E
        vehicles[119] = 907975255
        --TOY_COR_STK_86_NFS_E
        vehicles[120] = 1333797271
        --SHE_DAY_COU_65_PP1V1
        vehicles[121] = 1241611741
        vehicles[122] = 2683772338
        vehicles[123] = 518514680
        vehicles[124] = 3472854976
        vehicles[125] = 3523685951
        vehicles[126] = 3629261332
        vehicles[127] = 3439662912
        vehicles[128] = 2666964101
        --SHE_DAY_COU_65_PP2V1
        vehicles[129] = 2996645409
        vehicles[130] = 3314765652
        vehicles[131] = 259914488
        vehicles[132] = 1295232418
        vehicles[133] = 974990480
        vehicles[134] = 2131311971
        vehicles[135] = 1205195321
        vehicles[136] = 3631894439
        --AUD_UR_QUA_91_PP_RUN
        vehicles[137] = 470076578
        --NIS_GTR_R32_91_PRESALE_1
        vehicles[138] = AOBtoDEC("9C 08 57 6E")
        --TOY_SUP_STK_98_NFS_E
        vehicles[139] = AOBtoDEC("39 34 40 09")
        --CHE_EL_CAM_70_PP_RIVAL_1
        vehicles[140] = AOBtoDEC("9C B4 8C 1D")
        --CHE_EL_CAM_70_PP_RIVAL_2
        vehicles[141] = AOBtoDEC("13 8C FE 5C")
        --CHE_EL_CAM_70_PP_RIVAL_3
        vehicles[142] = AOBtoDEC("7A AE 04 62")
        --FOR_RTR_X_69_PP1V1
        vehicles[143] = AOBtoDEC("0B 36 E5 FF")
        --NIS_S14_A_97_NFS_E
        vehicles[144] = AOBtoDEC("31 91 D4 32")
        --NIS_S14_A_97_ADSALES_1
        vehicles[145] = AOBtoDEC("72 73 0C 7B")
        --PON_FIR_STK_78_NFS_E
        vehicles[146] = AOBtoDEC("41 E9 F9 A9")
        --POR_993_GT2_96_ADSALES_1
        vehicles[147] = AOBtoDEC("07 60 D6 5E")
        --POR_993_GT2_96_MARKETING_1
        vehicles[148] = AOBtoDEC("CD DD EF FE")
        --POR_993_GT2_96_PP_STOCK_1
        vehicles[149] = AOBtoDEC("71 88 7E 3D")
        vehicles[150] = AOBtoDEC("9F B8 5A AF")
        vehicles[151] = AOBtoDEC("D2 5D 70 9F")
        vehicles[152] = AOBtoDEC("3D 95 DA 96")
        vehicles[153] = AOBtoDEC("2D D4 51 0D")
        vehicles[154] = AOBtoDEC("07 0D 1A 70")
        vehicles[155] = AOBtoDEC("AE A8 45 66")
        vehicles[156] = AOBtoDEC("55 88 EE D1")
        --POR_993_GT2_96_PP1V1
        vehicles[157] = AOBtoDEC("D5 42 FF DB")
        vehicles[158] = AOBtoDEC("6B 3A 5C 71")
        vehicles[159] = AOBtoDEC("E4 88 12 3B")
        vehicles[160] = AOBtoDEC("31 11 F5 37")
        vehicles[161] = AOBtoDEC("CE F9 D2 6A")
        vehicles[162] = AOBtoDEC("5E 2A E9 C2")
        vehicles[163] = AOBtoDEC("41 EA C6 03")
        vehicles[164] = AOBtoDEC("1B 35 08 81")
        --POR_993_GT2_96_PP2V1
        vehicles[165] = AOBtoDEC("23 72 11 42")
        vehicles[166] = AOBtoDEC("6E 26 CE 4B")
        vehicles[167] = AOBtoDEC("DF 51 CC C1")
        vehicles[168] = AOBtoDEC("5A C5 5C D5")
        vehicles[169] = AOBtoDEC("CC 04 E6 BF")
        vehicles[170] = AOBtoDEC("D0 24 12 F3")
        vehicles[171] = AOBtoDEC("5E 4D F2 B1")
        vehicles[172] = AOBtoDEC("05 F4 E4 86")
        --MAZ_RX7_RZ_98_AI
        vehicles[173] = AOBtoDEC("E4 F4 A9 DB")
        vehicles[174] = AOBtoDEC("9D 35 C9 5D")
        vehicles[175] = AOBtoDEC("FF E4 DD 52")
        vehicles[176] = AOBtoDEC("94 5C 10 68")
        vehicles[177] = AOBtoDEC("57 28 CA A2")
        --NIS_GTR_R32_91_AI
        vehicles[178] = AOBtoDEC("D2 BE 15 8E")
        vehicles[179] = AOBtoDEC("23 10 8D BF")
        vehicles[180] = AOBtoDEC("91 98 9E 4F")
        vehicles[181] = AOBtoDEC("59 C0 2A 63")
        vehicles[182] = AOBtoDEC("4D 1B A1 EA")
        vehicles[183] = AOBtoDEC("63 EE 1E A2")
        --NIS_S14_A_97_AI
        vehicles[184] = AOBtoDEC("CD CB C5 A7")
        vehicles[185] = AOBtoDEC("22 B9 8F B2")
        vehicles[186] = AOBtoDEC("88 5F 14 A4")
        vehicles[187] = AOBtoDEC("2E F1 F4 4C")
        vehicles[188] = AOBtoDEC("FB 77 8F 95")
        vehicles[189] = AOBtoDEC("52 2E 14 25")
        vehicles[190] = AOBtoDEC("FC E0 D5 C0")
        --PON_FIR_STK_78_AI
        vehicles[191] = AOBtoDEC("5E FD 52 DD")
        vehicles[192] = AOBtoDEC("55 D7 B4 78")
        vehicles[193] = AOBtoDEC("93 FE E1 3E")
        vehicles[194] = AOBtoDEC("B1 25 4D 28")
        vehicles[195] = AOBtoDEC("98 8F 61 29")
        vehicles[196] = AOBtoDEC("9C AE C6 FC")
        --TOY_SUP_STK_98_AI
        vehicles[197] = AOBtoDEC("C6 C5 F0 5B")
        vehicles[198] = AOBtoDEC("88 81 31 93")
        vehicles[199] = AOBtoDEC("30 A7 9B EF")
        vehicles[200] = AOBtoDEC("42 62 9E 86")
        vehicles[201] = AOBtoDEC("11 D6 EB AD")
        vehicles[202] = AOBtoDEC("59 C8 17 91")
        vehicles[203] = AOBtoDEC("2F BF A5 40")

        --CUSTOM MADE BY _mRally2
        --LAM_MIU_SV_71
        vehicles[204] = AOBtoDEC("98 9F 9B BF")
        --POR_993_GT2_96
        vehicles[205] = AOBtoDEC("C9 2E CC 24")
        --POR_993_GT2_RWB_96
        vehicles[206] = AOBtoDEC("00 76 9F 16")
        --TOY_COR_STK_86
        vehicles[207] = AOBtoDEC("C4 39 92 29")
        --PON_FIR_STK_78
        vehicles[208] = AOBtoDEC("64 7C 00 58")
        --FOR_RTR_X_69
        vehicles[209] = AOBtoDEC("05 F2 DE 5F")
        --TOY_SUP_STK_98
        vehicles[210] = AOBtoDEC("44 B2 6A 5C")
        --NIS_240_S30_71
        vehicles[211] = AOBtoDEC("29 D2 CE 60")
        --TOY_SUP_RAD_98
        vehicles[212] = AOBtoDEC("18 A0 CA 29")
        --NIS_240_ZG_71
        vehicles[213] = AOBtoDEC("FC 13 81 6B")
        --TOY_COR_STK_86
        vehicles[214] = AOBtoDEC("C4 39 92 29")

        --EXCLUSIVE FOR AI DRIVING ONLY
        --POR_993_GT2_96_RW_NULL
        vehicles[215] = AOBtoDEC("C5 03 A8 D7")

        local  function my_random (t,from, to)
        local num = math.random (from, to)
        if t[num] then  num = my_random (t, from, to)  end
            t[num]=num
            return num
        end

        if readInteger("[[[[027A4F60]+14]+68]+10]+4") == 1663746137 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            local eigth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x38
            local nineth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x40
            local tenth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x48
            local array = {}
            local t = {}
            for i =1, 10 do
                X = my_random (t, 1, 215)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            writeInteger(eigth,vehicles[array[8]])
            writeInteger(nineth,vehicles[array[9]])
            writeInteger(tenth,vehicles[array[10]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] and
                readInteger(seventh) == vehicles[array[7]] and
                readInteger(eigth) == vehicles[array[8]] and
                readInteger(nineth) == vehicles[array[9]] and
                readInteger(tenth) == vehicles[array[10]] then
                print "Desert Hills Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3471684760 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            local eigth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x38
            local nineth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x40
            local tenth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x48
            local array = {}
            local t = {}
            for i =1, 10 do
                X = my_random (t, 1, 215)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            writeInteger(eigth,vehicles[array[8]])
            writeInteger(nineth,vehicles[array[9]])
            writeInteger(tenth,vehicles[array[10]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] and
                readInteger(seventh) == vehicles[array[7]] and
                readInteger(eigth) == vehicles[array[8]] and
                readInteger(nineth) == vehicles[array[9]] and
                readInteger(tenth) == vehicles[array[10]] then
                print "Desert Hills Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3589993730 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            local eigth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x38
            local nineth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x40
            local tenth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x48
            local array = {}
            local t = {}
            for i =1, 10 do
                X = my_random (t, 1, 215)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            writeInteger(eigth,vehicles[array[8]])
            writeInteger(nineth,vehicles[array[9]])
            writeInteger(tenth,vehicles[array[10]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] and
                readInteger(seventh) == vehicles[array[7]] and
                readInteger(eigth) == vehicles[array[8]] and
                readInteger(nineth) == vehicles[array[9]] and
                readInteger(tenth) == vehicles[array[10]] then
                print "Desert Hills Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3083222042 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local array = {}
            local t = {}
            for i =1, 3 do
                X = my_random (t, 1, 215)
                array[i] = X
            end
            --writeInteger(first,vehicles[array[1]])
            --writeInteger(second,vehicles[array[2]])
            --writeInteger(third,vehicles[array[3]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] then
                print "Sierra Pass Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 746773576 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            local eigth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x38
            local nineth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x40
            local tenth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x48
            local array = {}
            local t = {}
            for i =1, 9 do
                X = my_random (t, 1, 215)
                array[i] = X
            end
            writeInteger(first,1891289054)
            writeInteger(second,vehicles[array[1]])
            writeInteger(third,vehicles[array[2]])
            writeInteger(fourth,vehicles[array[3]])
            writeInteger(fifth,vehicles[array[4]])
            writeInteger(sixth,vehicles[array[5]])
            writeInteger(seventh,vehicles[array[6]])
            writeInteger(eigth,vehicles[array[7]])
            writeInteger(nineth,vehicles[array[8]])
            writeInteger(tenth,vehicles[array[9]])
            if readInteger(first) == 1891289054 and
                readInteger(second) == vehicles[array[1]] and
                readInteger(third) == vehicles[array[2]] and
                readInteger(fourth) == vehicles[array[3]] and
                readInteger(fifth) == vehicles[array[4]] and
                readInteger(sixth) == vehicles[array[5]] and
                readInteger(seventh) == vehicles[array[6]] and
                readInteger(eigth) == vehicles[array[7]] and
                readInteger(nineth) == vehicles[array[8]] and
                readInteger(tenth) == vehicles[array[9]] then
                print "Desert Hills Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3508062179 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local array = {}
            local t = {}
            for i =1, 5 do
                X = my_random (t, 1, 215)
                array[i] = X
            end
            writeInteger(first,1891289054)
            writeInteger(second,vehicles[array[1]])
            writeInteger(third,vehicles[array[2]])
            writeInteger(fourth,vehicles[array[3]])
            writeInteger(fifth,vehicles[array[4]])
            writeInteger(sixth,vehicles[array[5]])
            if readInteger(first) == 1891289054 and
                readInteger(second) == vehicles[array[1]] and
                readInteger(third) == vehicles[array[2]] and
                readInteger(fourth) == vehicles[array[3]] and
                readInteger(fifth) == vehicles[array[4]] and
                readInteger(sixth) == vehicles[array[5]] then
                print "Death Valley A Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 1770516894 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local array = {}
            local t = {}
            for i =1, 4 do
                X = my_random (t, 1, 215)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] then
                print "Death Valley B Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3319259724 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local array = {}
            local t = {}
            X = my_random (t, 1, 215)
            array[1] = X
            writeInteger(first,vehicles[array[1]])
            if readInteger(first) == vehicles[array[1]] then
                print "Las Vegas East A Battle Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 570367103 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local array = {}
            local t = {}
            for i =1, 3 do
                X = my_random (t, 1, 215)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] then
                print "Sierra Pass Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 703857006 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            local eigth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x38
            local array = {}
            local t = {}
            for i =1, 8 do
                X = my_random (t, 1, 215)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            writeInteger(eigth,vehicles[array[8]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] and
                readInteger(seventh) == vehicles[array[7]] and
                readInteger(eigth) == vehicles[array[8]] then
                print "Desert Hills Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3268712543 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local array = {}
            local t = {}
            for i =1, 6 do
                X = my_random (t, 1, 215)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] then
                print "Death Valley A Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 1214321547 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            local eigth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x38
            local array = {}
            local t = {}
            for i =1, 8 do
                X = my_random (t, 1, 215)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            writeInteger(eigth,vehicles[array[8]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] and
                readInteger(seventh) == vehicles[array[7]] and
                readInteger(eigth) == vehicles[array[8]] then
                print "Desert Hills Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 502950628 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            writeInteger(first,1412202905) --CALVIN PLAINS RIVAL RACE
            if readInteger(first) == 1412202905 then
                print "Las Vegas East A Battle Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 757287967 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            local array = {}
            local t = {}
            for i =1, 7 do
                X = my_random (t, 1, 215)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] and
                readInteger(seventh) == vehicles[array[7]] then
                print "Desert Hills Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 2911404618 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local array = {}
            local t = {}
            for i =1, 3 do
                X = my_random (t, 1, 215)
                array[i] = X
            end
            writeInteger(first,1891289054)
            writeInteger(second,vehicles[array[1]])
            writeInteger(third,vehicles[array[2]])
            writeInteger(fourth,vehicles[array[3]])
            if readInteger(first) == 1891289054 and
                readInteger(second) == vehicles[array[1]] and
                readInteger(third) == vehicles[array[2]] and
                readInteger(fourth) == vehicles[array[3]] then
                print "Death Valley B Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 2952613532 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local array = {}
            local t = {}
            for i =1, 6 do
                X = my_random (t, 1, 215)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] then
                print "Death Valley A Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3289858687 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            local eigth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x38
            local array = {}
            local t = {}
            for i =1, 8 do
                X = my_random (t, 1, 215)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            writeInteger(eigth,vehicles[array[8]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] and
                readInteger(seventh) == vehicles[array[7]] and
                readInteger(eigth) == vehicles[array[8]] then
                print "Desert Hills Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3908753765 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local array = {}
            local t = {}
            for i =1, 6 do
                X = my_random (t, 1, 215)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] then
                print "Death Valley A Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 1844033689 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local array = {}
            local t = {}
            X = my_random (t, 1, 215)
            array[1] = X
            --writeInteger(first,vehicles[array[1]])
            if readInteger(first) == vehicles[array[1]] then
                print "Las Vegas East A Battle Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3914415322 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local array = {}
            local t = {}
            for i =1, 4 do
                X = my_random (t, 1, 215)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] then
                print "Death Valley B Race cars swap has completed successfully"
            end
        end
    end
end

s49 = createTimer(nil)
timer_onTimer(s49,Stage49)
timer_setInterval(s49, 500)
timer_setEnabled(s49, true)


[DISABLE]
timer_setEnabled(s49, false)
print "The Classics Run Cars Swap Stage 4 to 9 timer disabled"
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>963</ID>
          <Description>"Stage 9 10"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()
function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end
function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end
[ENABLE]
print "The Classics Run Cars Swap Stage 9 to 10 timer enabled"
function Stage910()
    if readPointer("[[[[027A4F60]+14]+68]+10]+4") ~= nil then
        if readPointer("[[[[00AA71F4]+F8]+6E8]+28]+58") ~= nil and
            readInteger("[[[[00AA71F4]+F8]+6E8]+28]+58") == 3090365568 then
            writeInteger("[[[[00AA71F4]+F8]+6E8]+28]+58",2763179715)
        end
        local vehicles = {}
        --BMW_M3_E30_90_PP_RARE_1
        vehicles[1] = 2320421064
        --SHE_DAY_COU_65_PP_RARE_1
        vehicles[2] = 4022012078
        --VOL_GTI_MK1_76_PP_RARE_1
        vehicles[3] = 3720220186
        --CHE_CAM_SS_67_PP_RARE_1
        vehicles[4] = 313312439
        --CHE_EL_CAM_70_PP_RARE_1
        vehicles[5] = 960019312
        --FOR_VIC_TAXI_PLAYER
        vehicles[6] = 3675475195
        --MAZ_RX7_RZ_98_PP_RARE_1
        vehicles[7] = 2688135082
        --NIS_S14_A_97_PP_RARE_1
        vehicles[8] = 1409617150
        --PON_FIR_STK_78_PP_RARE_1
        vehicles[9] = 3044389769
        --TOY_SUP_STK_98_MARKETING_1
        vehicles[10] = 1222984308
        --MAZ_RX7_RZ_98_NFS_E
        vehicles[11] = 529645684
        --NIS_240_ZG_71_PP_RARE_1
        vehicles[12] = 4150176875
        --NIS_GTR_STK_73_PP_RARE_1
        vehicles[13] = 1203603962
        --NIS_GTR_R32_91_PP_RARE_1
        vehicles[14] = 1279882972
        --MCL_F1_STK_94_PP_STOCK_1
        vehicles[15] = 3082609147
        vehicles[16] = 1842326981
        vehicles[17] = 3597153073
        vehicles[18] = 2027198581
        vehicles[19] = 4061750909
        vehicles[20] = 3284152259
        vehicles[21] = 3971845986
        vehicles[22] = 2188451802
        --MCL_F1_STK_94_PP1V1
        vehicles[23] = 2188732611
        vehicles[24] = 8847892
        vehicles[25] = 2546659436
        vehicles[26] = 4201908254
        vehicles[27] = 3309128826
        vehicles[28] = 3763200407
        vehicles[29] = 734242523
        vehicles[30] = 4147231431
        --MCL_F1_STK_94_PP2V1
        vehicles[31] = 3451952857
        vehicles[32] = 2727696005
        vehicles[33] = 2569286113
        vehicles[34] = 179413785
        vehicles[35] = 2797745784
        vehicles[36] = 4269482447
        vehicles[37] = 1346627002
        vehicles[38] = 3904972435
        --SHE_DAY_COU_65_NFS_E
        vehicles[39] = AOBtoDEC("61 6B 47 41")

        --CUSTOM MADE BY _mRally2
        --AUD_UR_QUA_91
        vehicles[40] = AOBtoDEC("BF 4C AC 14")
        --BMW_M3_E30_90
        vehicles[41] = AOBtoDEC("12 32 6B 5C")
        --DOD_CHA_RT_71
        vehicles[42] = AOBtoDEC("59 43 9F D9")
        --FOR_MUS_302_69
        vehicles[43] = AOBtoDEC("E0 78 5E 9D")
        --LAM_COU_QV_85
        vehicles[44] = AOBtoDEC("6C 1D E1 1E")
        --MAZ_RX7_RZ_98
        vehicles[45] = AOBtoDEC("E8 01 55 DD")
        --NIS_S14_A_97
        vehicles[46] = AOBtoDEC("62 5F F6 53")
        --SHE_DAY_COU_65
        vehicles[47] = AOBtoDEC("86 6D 7F CF")
        --VOL_GTI_MK1_76
        vehicles[48] = AOBtoDEC("8C 6D 5D 6A")
        --NIS_240_ZG_71_PP_RUN_GARAGE_CAR
        vehicles[49] = AOBtoDEC("8B CA E1 99")
        --MCL_F1_STK_94
        vehicles[50] = AOBtoDEC("E0 65 D2 DC")
        --NFS_240_ZG_71_NFS_E
        vehicles[51] = 1190262596

        --EXCLUSIVE FOR AI DRIVING ONLY
        --MCL_F1_STK_94_NULL
        vehicles[52] = AOBtoDEC("30 A4 FB A2")

        local  function my_random (t,from, to)
        local num = math.random (from, to)
        if t[num] then  num = my_random (t, from, to)  end
            t[num]=num
            return num
        end

        if readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3084366756 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local array = {}
            local t = {}
            for i =1, 6 do
                X = my_random (t, 1, 52)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] then
                print "Death Valley A Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 272462180 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local array = {}
            local t = {}
            for i =1, 3 do
                X = my_random (t, 1, 52)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] then
                print "Sierra Pass Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 4045851596 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            writeInteger(first,2588383386) --MILA T5 RIVAL RACE
            if readInteger(first) == 2588383386 then
                print "Las Vegas East A Battle Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 4214528836 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            writeInteger(first,1751982565) --EDDIE RIVAL RACE
            if readInteger(first) == 1751982565 then
                print "Las Vegas East A Battle Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3149572385 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            writeInteger(first,2514421767) --CALVIN T6 RIVAL RACE
            if readInteger(first) == 2514421767 then
                print "Las Vegas East A Battle Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3229489595 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local array = {}
            local t = {}
            for i =1, 3 do
                X = my_random (t, 1, 52)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] then
                print "Sierra Pass Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3418726804 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            writeInteger(first,1844033689) --FINAL RACE MARCUS
            if readInteger(first) == 1844033689 then
                print "Las Vegas East A Battle Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 1732090001 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            local eigth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x38
            local array = {}
            local t = {}
            for i =1, 8 do
                X = my_random (t, 1, 52)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            writeInteger(eigth,vehicles[array[8]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] and
                readInteger(seventh) == vehicles[array[7]] and
                readInteger(eigth) == vehicles[array[8]] then
                print "Desert Hills Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3393955391 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            writeInteger(first,3781645985) --DELEON T5 RIVAL RACE
            if readInteger(first) == 3781645985 then
                print "Las Vegas East A Battle Race cars swap has completed successfully"
            end
        end
    end
end

s910 = createTimer(nil)
timer_onTimer(s910,Stage910)
timer_setInterval(s910, 500)
timer_setEnabled(s910, true)


[DISABLE]
timer_setEnabled(s910, false)
print "The Classics Run Cars Swap Stage 9 to 10 timer disabled"
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>862</ID>
          <Description>"SanFran"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()
[ENABLE]
math.randomseed(os.time())
print "San Francisco The Classics Run Garage Cars Randomizer timer enabled"
function SanFran()
    if readPointer("[[[[[027147B0]+344]+24]+4]+38]+0") ~= nil then
        local address2 = getAddress("[[[[[027147B0]+344]+24]+4]+38]+0")
        local address22 = address2 + 0x4
        if address2 ~= nil and readInteger(address2) == 2580303702 and readInteger(address22) == 1165774027 then
            first = address2 + 0x4
            second = address2 + 0xC
            third = address2 + 0x14
            fourth = address2 + 0x1C
            fifth = address2 + 0x24

            local  function my_random (t,from, to)
            local num = math.random (from, to)
            if t[num] then  num = my_random (t, from, to)  end
                t[num]=num
                return num
            end

            local array = {}
            local t = {}
            for i =1, 6 do
                X = my_random (t, 1, 96)
                array[i] = X
            end

            --FOR STARTERS, JACK DRIVES FULLY STOCK VINTAGE CARS.
            --FROM STAGE 2 ONWARDS, HE IS ABLE TO SELECT CUSTOM T1 OR T2 CARS ON THE AVAILABLE GAS STATIONS
            local vehicles = {}
            --AUD_UR_QUA_91_PP_STOCK_1
            vehicles[1] = 2502726747
            vehicles[2] = 3073349389
            vehicles[3] = 143753977
            vehicles[4] = 4225561497
            vehicles[5] = 786735054
            vehicles[6] = 974677243
            vehicles[7] = 1071177696
            vehicles[8] = 1589944205
            --BMW_M3_E30_90_PP_STOCK_1
            vehicles[9] = 1719691339
            vehicles[10] = 4277695769
            vehicles[11] = 27874341
            vehicles[12] = 4078634043
            vehicles[13] = 2966784590
            vehicles[14] = 3817400829
            vehicles[15] = 308716637
            vehicles[16] = 3301497845
            --CHE_CAM_SS_67_PP_STOCK_1
            vehicles[17] = 1522441908
            vehicles[18] = 150155535
            vehicles[19] = 4047731096
            vehicles[20] = 3603434424
            vehicles[21] = 933904526
            vehicles[22] = 1760866290
            vehicles[23] = 1935511816
            vehicles[24] = 3986269571
            --CHE_EL_CAM_70_PP_STOCK_1
            vehicles[25] = 4152999272
            vehicles[26] = 2839316226
            vehicles[27] = 850809204
            vehicles[28] = 1507013332
            vehicles[29] = 2744598914
            vehicles[30] = 874261196
            vehicles[31] = 1489277057
            vehicles[32] = 3963367876
            --DOD_CHA_RT_71_PP_STOCK_1
            vehicles[33] = 658081404
            vehicles[34] = 353759425
            vehicles[35] = 897078296
            vehicles[36] = 904978235
            vehicles[37] = 1838233732
            vehicles[38] = 2193678947
            vehicles[39] = 1587191578
            vehicles[40] = 3371414360
            --FOR_MUS_302_69_PP_STOCK_1
            vehicles[41] = 1500183094
            vehicles[42] = 162166122
            vehicles[43] = 161538668
            vehicles[44] = 2191334224
            vehicles[45] = 3348852928
            vehicles[46] = 2138722167
            vehicles[47] = 3095976600
            vehicles[48] = 3713352339
            --NIS_240_ZG_71_PP_STOCK_1
            vehicles[49] = 1793448368
            vehicles[50] = 2680795434
            vehicles[51] = 1653183305
            vehicles[52] = 2107071804
            vehicles[53] = 174254050
            vehicles[54] = 2003942101
            vehicles[55] = 3056380666
            vehicles[56] = 2365200806
            --NIS_GTR_STK_73_PP_STOCK_1
            vehicles[57] = 3245189596
            vehicles[58] = 4154641755
            vehicles[59] = 1478693012
            vehicles[60] = 761082798
            vehicles[61] = 1526172372
            vehicles[62] = 432743829
            vehicles[63] = 612501851
            vehicles[64] = 1492908884
            --TOY_COR_STK_86_PP_STOCK_1
            vehicles[65] = 382914145
            vehicles[66] = 892817461
            vehicles[67] = 1541422759
            vehicles[68] = 4232320339
            vehicles[69] = 342451886
            vehicles[70] = 4001731402
            vehicles[71] = 2522207311
            vehicles[72] = 3729990700
            --VOL_GTI_MK1_76_PP_STOCK_1
            vehicles[73] = 470621649
            vehicles[74] = 3721885843
            vehicles[75] = 561262262
            vehicles[76] = 1446568855
            vehicles[77] = 3365712787
            vehicles[78] = 77381397
            vehicles[79] = 2733609224
            vehicles[80] = 3338495730
            --PON_FIR_STK_78_PP_STOCK_1
            vehicles[81] = 3681840500
            vehicles[82] = 3949993724
            vehicles[83] = 3350848715
            vehicles[84] = 2691382565
            vehicles[85] = 3379929237
            vehicles[86] = 2618823770
            vehicles[87] = 1034103769
            vehicles[88] = 4167471778
            --NIS_S14_A_97_PP_STOCK_1
            vehicles[89] = 2604553166
            vehicles[90] = 3874314692
            vehicles[91] = 2802420719
            vehicles[92] = 4170138417
            vehicles[93] = 1930173700
            vehicles[94] = 3322475057
            vehicles[95] = 4015386987
            vehicles[96] = 3345915973

            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])

            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] then
                print "The swap has completed successfully"
            end
        end
    end
end

sf = createTimer(nil)
timer_onTimer(sf,SanFran)
timer_setInterval(sf, 500)
timer_setEnabled(sf, true)

[DISABLE]
timer_setEnabled(sf, false)
print "San Francisco The Classics Run Garage Cars Randomizer timer disabled"
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>863</ID>
          <Description>"LasVegas"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()
[ENABLE]
math.randomseed(os.time())
print "Las Vegas East The Classics Run Tier 3 Cars Select Randomizer timer enabled"
function LasVegas()
    if readPointer("[[[[027147B0]+56C]+64]+A0]+0") ~= nil then
        local lastCarClassID = getAddress("[[[[027147B0]+56C]+64]+A0]+0")
        local lastCarID = lastCarClassID + 0x4
        if lastCarClassID ~= nil and readInteger(lastCarClassID) == 2580303702 and readInteger(lastCarID) == 3662254698 then
            first = lastCarClassID + 0x4
            second = lastCarClassID + 0xC
            third = lastCarClassID + 0x14
            local  function my_random (t,from, to)
            local num = math.random (from, to)
            if t[num] then  num = my_random (t, from, to)  end
                t[num]=num
                return num
            end
            local array = {}
            local t = {}
            local w = {}
            local z = {}
            T = my_random (t, 1, 8)
            array[1] = T
            W = my_random (w, 9, 16)
            array[2] = W
            Z = my_random (z, 17, 24)
            array[3] = Z
            local vec = {}
            local y = {}
            for i =1, 3 do
                Y = my_random (y, 1, 3)
                vec[i] = Y
            end
            --TIER 3 CUSTOM &amp; TIER 4 WILL BE PROVIDED ON GAS STATIONS
            local vehicles = {}
            --SHE_DAY_COU_65_PP_STOCK_1
            vehicles[1] = 4152129083
            vehicles[2] = 3871257759
            vehicles[3] = 3289542481
            vehicles[4] = 2461231717
            vehicles[5] = 881791887
            vehicles[6] = 878544792
            vehicles[7] = 2902527303
            vehicles[8] = 1636074729
            --LAM_COU_QV_85_PP_STOCK_1
            vehicles[9] = 2031156362
            vehicles[10] = 2296894266
            vehicles[11] = 2397773668
            vehicles[12] = 1816534390
            vehicles[13] = 2772598421
            vehicles[14] = 579118439
            vehicles[15] = 3429219263
            vehicles[16] = 419023887
            --LAM_MIU_SV_71_PP_STOCK_1
            vehicles[17] = 3003939881
            vehicles[18] = 612152928
            vehicles[19] = 3568574533
            vehicles[20] = 99186252
            vehicles[21] = 3952549375
            vehicles[22] = 2426551597
            vehicles[23] = 4214968814
            vehicles[24] = 3035759228

            writeInteger(first,vehicles[array[vec[1]]])
            writeInteger(second,vehicles[array[vec[2]]])
            writeInteger(third,vehicles[array[vec[3]]])
            if readInteger(first) == vehicles[array[vec[1]]] and
                readInteger(second) == vehicles[array[vec[2]]] and
                readInteger(third) == vehicles[array[vec[3]]] then
                print "The Las Vegas East Vintage Tier 3 Cars swap has completed successfully"
            end
        end
    end
end

lv = createTimer(nil)
timer_onTimer(lv,LasVegas)
timer_setInterval(lv, 100)
timer_setEnabled(lv, true)

[DISABLE]
timer_setEnabled(lv, false)
print "Las Vegas East The Classics Run Tier 3 Cars Select Randomizer timer disabled"
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>864</ID>
          <Description>"Chicago"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()
function my_random (t,from, to)
    local num = math.random (from, to)
    if t[num] then  num = my_random (t, from, to)  end
    t[num]=num
    return num
end
function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end
function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end
[ENABLE]
math.randomseed(os.time())
print "Chicago Downtown The Classics Run Car Select Randomizer timer enabled"

--MEMORY SCAN
local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

local dummyVehicleID_1 = 0
local dummyVehicleID_2 = 0
local dummyVehicleID_3 = 0

--_c4/Gameplay/Garage/POR/TRF_POR_CAY_08
local AOB = "56 4F CC 99 * * * * 5F 63 34 2F 47 61 6D 65 70 6C 61 79 2F 47 61 72 61 67 65 2F 50 4F 52 2F 54 52 46 5F 50 4F 52 5F 43 41 59 5F 30 38"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format
if address ~= nil then
    dummyVehicleID_1 = address + 0x4
    print "String Swap Complete Complete!"
else
    print "String Swap Failed!"
end

--_c4/Gameplay/Garage/POR/POR_911_C4S_11_PP_RUN
local AOB = "56 4F CC 99 * * * * 5F 63 34 2F 47 61 6D 65 70 6C 61 79 2F 47 61 72 61 67 65 2F 50 4F 52 2F 50 4F 52 5F 39 31 31 5F 43 34 53 5F 31 31 5F 50 50 5F 52 55 4E"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format
if address ~= nil then
    dummyVehicleID_2 = address + 0x4
    print "String Swap Complete Complete!"
else
    print "String Swap Failed!"
end

--_c4/Gameplay/Garage/BMW_M3_GTS_10_STOCK
local AOB = "56 4F CC 99 * * * * 5F 63 34 2F 47 61 6D 65 70 6C 61 79 2F 47 61 72 61 67 65 2F 42 4D 57 5F 4D 33 5F 47 54 53 5F 31 30 5F 53 54 4F 43 4B"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format
if address ~= nil then
    dummyVehicleID_3 = address + 0x4
    print "String Swap Complete Complete!"
else
    print "String Swap Failed!"
end

function Chicago()
    local vehicles = {}
    --AUD_UR_QUA_91_AI_T4
    vehicles[1] = 3418979519
    vehicles[2] = 2360253972
    vehicles[3] = 3953285671
    vehicles[4] = 1878717712
    --BMW_M3_E30_90_AI_T4
    vehicles[5] = 3965047869
    vehicles[6] = 3000683173
    vehicles[7] = 3508062179
    vehicles[8] = 771405773
    vehicles[9] = 3867369482
    --CHE_EL_CAM_70_AI_T4
    vehicles[10] = 2053301536
    vehicles[11] = 96789362
    vehicles[12] = 3083222042
    vehicles[13] = 3822410543
    vehicles[14] = 585575516
    vehicles[15] = 3393955391
    vehicles[16] = 3643384219
    vehicles[17] = 3169722097
    --CHE_CAM_SS_67_AI_T4
    vehicles[18] = 1925569773
    vehicles[19] = 145181003
    vehicles[20] = 2789574667
    vehicles[21] = 2695468121
    vehicles[22] = 2955493261
    vehicles[23] = 1157837898
    --DOD_CHA_RT_71_AI_T4
    vehicles[24] = 1013798201
    vehicles[25] = 132446852
    vehicles[26] = 1161287153
    vehicles[27] = 1894368909
    vehicles[28] = 3481124691
    vehicles[29] = 1350671612
    --FOR_MUS_302_69_AI_T4
    vehicles[30] = 28547989
    vehicles[31] = 3592138099
    vehicles[32] = 659679187
    vehicles[33] = 1106812868
    --LAM_MIU_SV_71_AI_T4
    vehicles[34] = 2615959382
    vehicles[35] = 246197794
    vehicles[36] = 3193857785
    vehicles[37] = 3908753765
    vehicles[38] = 3339108312
    --NIS_240_ZG_71_AI_T4
    vehicles[39] = 2003853787
    vehicles[40] = 2155992723
    vehicles[41] = 4004575680
    vehicles[42] = 2335272314
    vehicles[43] = 1491506845
    --NIS_GTR_STK_73_AI_T4
    vehicles[44] = 1473954276
    vehicles[45] = 1553591204
    --SHE_DAY_COU_65_AI_T4
    vehicles[46] = 3357183898
    vehicles[47] = 232325685
    vehicles[48] = 3312278586
    vehicles[49] = 1201503826
    --TOY_COR_STK_86_AI_T4
    vehicles[50] = 1287845648
    vehicles[51] = 2128429859
    vehicles[52] = 2927791046
    --VOL_GTI_MK1_76_AI_T4
    vehicles[53] = 1840926221
    vehicles[54] = 2539886783
    vehicles[55] = 986928949
    vehicles[56] = 2613494165
    vehicles[57] = 2089443610
    vehicles[58] = 1339518974
    vehicles[59] = 3069328390
    --NIS_GTR_R32_91_AI
    vehicles[60] = AOBtoDEC("D2 BE 15 8E")
    vehicles[61] = AOBtoDEC("23 10 8D BF")
    vehicles[62] = AOBtoDEC("91 98 9E 4F")
    vehicles[63] = AOBtoDEC("59 C0 2A 63")
    vehicles[64] = AOBtoDEC("4D 1B A1 EA")
    vehicles[65] = AOBtoDEC("63 EE 1E A2")
    --BMW_M3_E30_90_NFS_E
    vehicles[66] = 143156729
    --CHE_CAM_SS_67_NFS_E
    vehicles[67] = 764119014
    --CHE_EL_CAM_70_NFS_E
    vehicles[68] = 3006189287
    --DOD_CHA_RT_71_NFS_E
    vehicles[69] = 531246253
    --FOR_MUS_302_69_ADSALES_1
    vehicles[70] = 268766097
    --FOR_MUS_302_69_NFS_E
    vehicles[71] = 2902452387
    --NIS_240_ZG_71_MARKETING_1
    vehicles[72] = 3001286456
    --NIS_240_ZG_71_PP_RUN
    vehicles[73] = 2581711499
    --SHE_DAY_COU_65_PP_RUN
    vehicles[74] = 3604153451
    --VOL_GTI_MK1_76_NFS_E
    vehicles[75] = 1901714060
    --POR_993_GT2_96_ADSALES_1
    vehicles[76] = 1591107591
    --POR_993_GT2_96_MARKETING_1
    vehicles[77] = 4277132749
    --AUD_UR_QUA_91_PP_RUN
    vehicles[78] = 470076578
    --CHE_EL_CAM_70_PP_RIVAL_1
    vehicles[79] = 495760540
    --CHE_EL_CAM_70_PP_RIVAL_2
    vehicles[80] = 1560185875
    --CHE_EL_CAM_70_PP_RIVAL_3
    vehicles[81] = 1644473978
    --FOR_RTR_X_69_PP1V1
    vehicles[82] = 4293211659
    --PON_FIR_STK_78_NFS_E
    vehicles[83] = 3044389769
    --POR_993_GT2_96_E3
    vehicles[84] = 909809290
    --NIS_S14_A_97_ADSALES_1
    vehicles[85] = 2064413554
    --NIS_S14_A_97_NFS_E
    vehicles[86] = 852791601
    --POR_993_GT2_96_PP_STOCK_1
    vehicles[87] = AOBtoDEC("71 88 7E 3D")
    vehicles[88] = AOBtoDEC("9F B8 5A AF")
    vehicles[89] = AOBtoDEC("D2 5D 70 9F")
    vehicles[90] = AOBtoDEC("3D 95 DA 96")
    vehicles[91] = AOBtoDEC("2D D4 51 0D")
    vehicles[92] = AOBtoDEC("07 0D 1A 70")
    vehicles[93] = AOBtoDEC("AE A8 45 66")
    vehicles[94] = AOBtoDEC("55 88 EE D1")
    --POR_993_GT2_96_PP1V1
    vehicles[95] = AOBtoDEC("D5 42 FF DB")
    vehicles[96] = AOBtoDEC("6B 3A 5C 71")
    vehicles[97] = AOBtoDEC("E4 88 12 3B")
    vehicles[98] = AOBtoDEC("31 11 F5 37")
    vehicles[99] = AOBtoDEC("CE F9 D2 6A")
    vehicles[100] = AOBtoDEC("5E 2A E9 C2")
    vehicles[101] = AOBtoDEC("41 EA C6 03")
    vehicles[102] = AOBtoDEC("1B 35 08 81")
    --POR_993_GT2_96_PP2V1
    vehicles[103] = AOBtoDEC("23 72 11 42")
    vehicles[104] = AOBtoDEC("6E 26 CE 4B")
    vehicles[105] = AOBtoDEC("DF 51 CC C1")
    vehicles[106] = AOBtoDEC("5A C5 5C D5")
    vehicles[107] = AOBtoDEC("CC 04 E6 BF")
    vehicles[108] = AOBtoDEC("D0 24 12 F3")
    vehicles[109] = AOBtoDEC("5E 4D F2 B1")
    vehicles[110] = AOBtoDEC("05 F4 E4 86")
    --MAZ_RX7_RZ_98_AI
    vehicles[111] = AOBtoDEC("E4 F4 A9 DB")
    vehicles[112] = AOBtoDEC("9D 35 C9 5D")
    vehicles[113] = AOBtoDEC("FF E4 DD 52")
    vehicles[114] = AOBtoDEC("94 5C 10 68")
    vehicles[115] = AOBtoDEC("57 28 CA A2")
    --NIS_S14_A_97_AI
    vehicles[116] = AOBtoDEC("CD CB C5 A7")
    vehicles[117] = AOBtoDEC("22 B9 8F B2")
    vehicles[118] = AOBtoDEC("88 5F 14 A4")
    vehicles[119] = AOBtoDEC("2E F1 F4 4C")
    vehicles[120] = AOBtoDEC("FB 77 8F 95")
    vehicles[121] = AOBtoDEC("52 2E 14 25")
    vehicles[122] = AOBtoDEC("FC E0 D5 C0")
    --PON_FIR_STK_78_AI
    vehicles[123] = AOBtoDEC("5E FD 52 DD")
    vehicles[124] = AOBtoDEC("55 D7 B4 78")
    vehicles[125] = AOBtoDEC("93 FE E1 3E")
    vehicles[126] = AOBtoDEC("B1 25 4D 28")
    vehicles[127] = AOBtoDEC("98 8F 61 29")
    vehicles[128] = AOBtoDEC("9C AE C6 FC")
    --TOY_SUP_STK_98_AI
    vehicles[129] = AOBtoDEC("C6 C5 F0 5B")
    vehicles[130] = AOBtoDEC("88 81 31 93")
    vehicles[131] = AOBtoDEC("30 A7 9B EF")
    vehicles[132] = AOBtoDEC("42 62 9E 86")
    vehicles[133] = AOBtoDEC("11 D6 EB AD")
    vehicles[134] = AOBtoDEC("59 C8 17 91")
    vehicles[135] = AOBtoDEC("2F BF A5 40")

    --CUSTOM MADE BY _mRally2
    --LAM_MIU_SV_71
    vehicles[136] = AOBtoDEC("98 9F 9B BF")
    --POR_993_GT2_96
    vehicles[137] = AOBtoDEC("C9 2E CC 24")
    --POR_993_GT2_RWB_96
    vehicles[138] = AOBtoDEC("00 76 9F 16")
    --TOY_COR_STK_86
    vehicles[139] = AOBtoDEC("C4 39 92 29")
    --PON_FIR_STK_78
    vehicles[140] = AOBtoDEC("64 7C 00 58")
    --FOR_RTR_X_69
    vehicles[141] = AOBtoDEC("05 F2 DE 5F")
    --TOY_SUP_STK_98
    vehicles[142] = AOBtoDEC("44 B2 6A 5C")
    --NIS_240_S30_71
    vehicles[143] = AOBtoDEC("29 D2 CE 60")
    --TOY_SUP_RAD_98
    vehicles[144] = AOBtoDEC("18 A0 CA 29")
    --NIS_240_ZG_71
    vehicles[145] = AOBtoDEC("FC 13 81 6B")
    --NIS_GTR_R32_91_AI_TIER_4
    vehicles[146] = AOBtoDEC("32 DC 09 BD")

    --EASTER EGG
    --LAM_MIU_SV_71_RIVAL
    vehicles[147] = AOBtoDEC("DE C7 BA 70")

    local ptr_1 = false
    local ptr_2 = false
    local ptr_3 = false
    local ptr_4 = false
    local ptr_5 = false
    local ptr_6 = false

    local jump = false

    local lastCarClassID = 0
    local lastCarID = 0

    if readPointer("[[[00CB40D4]+6C]+110]+0") ~= nil and readInteger("[[[00CB40D4]+6C]+110]+0") == 2580303702 and jump == false then
        ptr_1 = true
        jump = true
    elseif readPointer("[[[019FA888]+0]+A0]+0") ~= nil and readInteger("[[[019FA888]+0]+A0]+0") == 2580303702 and jump == false then
        ptr_2 = true
        jump = true
    elseif readPointer("[[[[00CB40D4]+3C]+180]+250]+0") ~= nil and readInteger("[[[[00CB40D4]+3C]+180]+250]+0") == 2580303702 and jump == false then
        ptr_3 = true
        jump = true
    elseif readPointer("[[[[00CB40D4]+38]+1F0]+250]+0") ~= nil and readInteger("[[[[00CB40D4]+38]+1F0]+250]+0") == 2580303702 and jump == false then
        ptr_4 = true
        jump = true
    elseif readPointer("[[[[[00CB40D4]+84]+B9C]+90]+250]+0") ~= nil and readInteger("[[[[[00CB40D4]+84]+B9C]+90]+250]+0") == 2580303702 and jump == false then
        ptr_5 = true
        jump = true
    elseif readPointer("[[[[[019FA888]+C]+BBC]+90]+250]+0") ~= nil and readInteger("[[[[[019FA888]+C]+BBC]+90]+250]+0") == 2580303702 and jump == false then
        ptr_6 = true
        jump = true
    end

    if jump == true then
        if ptr_1 == true then
            lastCarClassID = getAddress("[[[00CB40D4]+6C]+110]+0")
        elseif ptr_2 == true then
            lastCarClassID = getAddress("[[[019FA888]+0]+A0]+0")
        elseif ptr_3 == true then
            lastCarClassID = getAddress("[[[[00CB40D4]+3C]+180]+250]+0")
        elseif ptr_4 == true then
            lastCarClassID = getAddress("[[[[00CB40D4]+38]+1F0]+250]+0")
        elseif ptr_5 == true then
            lastCarClassID = getAddress("[[[[[00CB40D4]+84]+B9C]+90]+250]+0")
        elseif ptr_6 == true then
            lastCarClassID = getAddress("[[[[[019FA888]+C]+BBC]+90]+250]+0")
        end

        if lastCarClassID ~= nil and readInteger(lastCarClassID) == 2580303702 then
            lastCarID = lastCarClassID + 0x4
            if readInteger(lastCarID) == 470076578 then
                first = lastCarClassID + 0x4
                second = lastCarClassID + 0xC
                third = lastCarClassID + 0x14

                local array = {}
                local t = {}
                for i =1, 3 do
                    X = my_random (t, 1, 147)
                    array[i] = X
                end

                --WE WRITE FIRST THE VEHICLES INTO THE DUMMY PRESETS IN ORDER TO MAKE THEM SELECTABLE
                writeInteger(dummyVehicleID_1,vehicles[array[1]])
                writeInteger(dummyVehicleID_2,vehicles[array[2]])
                writeInteger(dummyVehicleID_3,vehicles[array[3]])

                writeInteger(first,vehicles[array[1]])
                writeInteger(second,vehicles[array[2]])
                writeInteger(third,vehicles[array[3]])

                if readInteger(first) == vehicles[array[1]] and
                    readInteger(second) == vehicles[array[2]] and
                    readInteger(third) == vehicles[array[3]] then
                    print "The swap has completed successfully"
                end
            end
        end
    end

end

cc = createTimer(nil)
timer_onTimer(cc,Chicago)
timer_setInterval(cc, 100)
timer_setEnabled(cc, true)

[DISABLE]
timer_setEnabled(cc, false)
print "Chicago Downtown The Classics Run Car Select Randomizer timer disabled"
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>865</ID>
          <Description>"Uri"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()
function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end
function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end
[ENABLE]
math.randomseed(os.time())
print "Uri Garage The Classics Run Cars Randomizer timer enabled"

--MEMORY SCAN
local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

local dummyVehicleID_12 = 0
local dummyVehicleID_22 = 0
local dummyVehicleID_32 = 0

--_c4/Gameplay/Garage/POR/TRF_POR_CAY_08
local AOB = "56 4F CC 99 * * * * 5F 63 34 2F 47 61 6D 65 70 6C 61 79 2F 47 61 72 61 67 65 2F 50 4F 52 2F 54 52 46 5F 50 4F 52 5F 43 41 59 5F 30 38"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format
if address ~= nil then
    dummyVehicleID_12 = address + 0x4
    print "String Swap Complete Complete!"
else
    print "String Swap Failed!"
end

--_c4/Gameplay/Garage/POR/POR_911_C4S_11_PP_RUN
local AOB = "56 4F CC 99 * * * * 5F 63 34 2F 47 61 6D 65 70 6C 61 79 2F 47 61 72 61 67 65 2F 50 4F 52 2F 50 4F 52 5F 39 31 31 5F 43 34 53 5F 31 31 5F 50 50 5F 52 55 4E"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format
if address ~= nil then
    dummyVehicleID_22 = address + 0x4
    print "String Swap Complete Complete!"
else
    print "String Swap Failed!"
end

--_c4/Gameplay/Garage/BMW_M3_GTS_10_STOCK
local AOB = "56 4F CC 99 * * * * 5F 63 34 2F 47 61 6D 65 70 6C 61 79 2F 47 61 72 61 67 65 2F 42 4D 57 5F 4D 33 5F 47 54 53 5F 31 30 5F 53 54 4F 43 4B"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format
if address ~= nil then
    dummyVehicleID_32 = address + 0x4
    print "String Swap Complete Complete!"
else
    print "String Swap Failed!"
end

function Uri()
    if readPointer("[[[[[027147B0]+7A4]+24]+8]+A0]+0") ~= nil then
        local lastCarClassID = getAddress("[[[[[027147B0]+7A4]+24]+8]+A0]+0")
        local lastCarID = lastCarClassID + 0x4
        if lastCarClassID ~= nil and readInteger(lastCarClassID) == 2580303702 and readInteger(lastCarID) == 3362615761 then
            first = lastCarClassID + 0x4
            second = lastCarClassID + 0xC
            third = lastCarClassID + 0x14
            local  function my_random (t,from, to)
            local num = math.random (from, to)
            if t[num] then  num = my_random (t, from, to)  end
                t[num]=num
                return num
            end
            local array = {}
            local t = {}
            for i =1, 3 do
                X = my_random (t, 1, 51)
                array[i] = X
            end
            local vehicles = {}
            --BMW_M3_E30_90_PP_RARE_1
            vehicles[1] = 2320421064
            --SHE_DAY_COU_65_PP_RARE_1
            vehicles[2] = 4022012078
            --VOL_GTI_MK1_76_PP_RARE_1
            vehicles[3] = 3720220186
            --CHE_CAM_SS_67_PP_RARE_1
            vehicles[4] = 313312439
            --CHE_EL_CAM_70_PP_RARE_1
            vehicles[5] = 960019312
            --FOR_VIC_TAXI_PLAYER
            vehicles[6] = 3675475195
            --MAZ_RX7_RZ_98_PP_RARE_1
            vehicles[7] = 2688135082
            --NIS_S14_A_97_PP_RARE_1
            vehicles[8] = 1409617150
            --PON_FIR_STK_78_PP_RARE_1
            vehicles[9] = 3044389769
            --TOY_SUP_STK_98_MARKETING_1
            vehicles[10] = 1222984308
            --MAZ_RX7_RZ_98_NFS_E
            vehicles[11] = 529645684
            --NIS_240_ZG_71_PP_RARE_1
            vehicles[12] = 4150176875
            --NIS_GTR_STK_73_PP_RARE_1
            vehicles[13] = 1203603962
            --NIS_GTR_R32_91_PP_RARE_1
            vehicles[14] = 1279882972
            --MCL_F1_STK_94_PP_STOCK_1
            vehicles[15] = 3082609147
            vehicles[16] = 1842326981
            vehicles[17] = 3597153073
            vehicles[18] = 2027198581
            vehicles[19] = 4061750909
            vehicles[20] = 3284152259
            vehicles[21] = 3971845986
            vehicles[22] = 2188451802
            --MCL_F1_STK_94_PP1V1
            vehicles[23] = 2188732611
            vehicles[24] = 8847892
            vehicles[25] = 2546659436
            vehicles[26] = 4201908254
            vehicles[27] = 3309128826
            vehicles[28] = 3763200407
            vehicles[29] = 734242523
            vehicles[30] = 4147231431
            --MCL_F1_STK_94_PP2V1
            vehicles[31] = 3451952857
            vehicles[32] = 2727696005
            vehicles[33] = 2569286113
            vehicles[34] = 179413785
            vehicles[35] = 2797745784
            vehicles[36] = 4269482447
            vehicles[37] = 1346627002
            vehicles[38] = 3904972435
            --SHE_DAY_COU_65_NFS_E
            vehicles[39] = AOBtoDEC("61 6B 47 41")

            --CUSTOM MADE BY _mRally2
            --AUD_UR_QUA_91
            vehicles[40] = AOBtoDEC("BF 4C AC 14")
            --BMW_M3_E30_90
            vehicles[41] = AOBtoDEC("12 32 6B 5C")
            --DOD_CHA_RT_71
            vehicles[42] = AOBtoDEC("59 43 9F D9")
            --FOR_MUS_302_69
            vehicles[43] = AOBtoDEC("E0 78 5E 9D")
            --LAM_COU_QV_85
            vehicles[44] = AOBtoDEC("6C 1D E1 1E")
            --MAZ_RX7_RZ_98
            vehicles[45] = AOBtoDEC("E8 01 55 DD")
            --NIS_S14_A_97
            vehicles[46] = AOBtoDEC("62 5F F6 53")
            --SHE_DAY_COU_65
            vehicles[47] = AOBtoDEC("86 6D 7F CF")
            --VOL_GTI_MK1_76
            vehicles[48] = AOBtoDEC("8C 6D 5D 6A")
            --NIS_240_ZG_71_PP_RUN_GARAGE_CAR
            vehicles[49] = AOBtoDEC("8B CA E1 99")
            --MCL_F1_STK_94
            vehicles[50] = AOBtoDEC("E0 65 D2 DC")
            --NFS_240_ZG_71_NFS_E
            vehicles[51] = 1190262596

            --WE WRITE FIRST THE VEHICLES INTO THE DUMMY PRESETS IN ORDER TO MAKE THEM SELECTABLE
            writeInteger(dummyVehicleID_12,vehicles[array[1]])
            writeInteger(dummyVehicleID_22,vehicles[array[2]])
            writeInteger(dummyVehicleID_32,vehicles[array[3]])

            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])

            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] then
                print "The swap has completed successfully"
            end
        end
    end
end

ur = createTimer(nil)
timer_onTimer(ur,Uri)
timer_setInterval(ur, 100)
timer_setEnabled(ur, true)

[DISABLE]
timer_setEnabled(ur, false)
print "Uri Garage The Classics Run Cars Randomizer timer disabled"
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1103</ID>
          <Description>"Story Mode Event Hook"</Description>
          <Options moHideChildren="1"/>
          <LastState Activated="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048)
alloc(storyEvent,$500)
registersymbol(storyEvent)
label(returnhere)
label(originalcode)
label(exit)

newmem:
push ebx
lea ebx,[eax+60]
mov [storyEvent],ebx
pop ebx
jmp originalcode

originalcode:
mov ecx,[eax+60]
mov edx,[edi]

exit:
jmp returnhere

"Need For Speed The Run.exe"+59BF15:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(storyEvent)
"Need For Speed The Run.exe"+59BF15:
mov ecx,[eax+60]
mov edx,[edi]
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>1104</ID>
              <Description>"Story Mode Event Challenge"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>storyEvent</Address>
              <Offsets>
                <Offset>1C</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1105</ID>
          <Description>"Timer Rebalance"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()
hasRebalancedTimer = 0
[ENABLE]
function TimerRebalance()
    --CHECK IF THE STORY MODE EVENT GETS RESET
    if readInteger("[[[[[[02A858B0]+88]+38]+D0]+14C]+8]+AEB") == nil then
        hasRebalancedTimer = 0
    end
    if readInteger(getAddress("[storyEvent]")+0x1C) == 718266787 then --Altamont Pass Rev
        if readPointer("[[[[[028A33E4]+48]+20]+90]+90]+4") ~= nil then
            if readFloat("[[[[[028A33E4]+48]+20]+90]+90]+4") &gt; 0 and hasRebalancedTimer == 0 then
                local initial = readFloat("[[[[[028A33E4]+48]+20]+90]+90]+4")
                writeFloat("[[[[[028A33E4]+48]+20]+90]+90]+4",initial+20)
                hasRebalancedTimer = 1
            end
        end
    elseif readInteger(getAddress("[storyEvent]")+0x1C) == 1422717901 then --Yosemite Approach Rev B
        if readPointer("[[[[[028A33E4]+48]+20]+90]+90]+4") ~= nil then
            if readFloat("[[[[[028A33E4]+48]+20]+90]+90]+4") &gt; 0 and hasRebalancedTimer == 0 then
                local initial = readFloat("[[[[[028A33E4]+48]+20]+90]+90]+4")
                writeFloat("[[[[[028A33E4]+48]+20]+90]+90]+4",initial+10)
                hasRebalancedTimer = 1
            end
        end
    elseif readInteger(getAddress("[storyEvent]")+0x1C) == 3553413120 then --Desert Valley Rev
        if readPointer("[[[[[028A33E4]+48]+20]+90]+90]+4") ~= nil then
            if readFloat("[[[[[028A33E4]+48]+20]+90]+90]+4") &gt; 0 and hasRebalancedTimer == 0 then
                local initial = readFloat("[[[[[028A33E4]+48]+20]+90]+90]+4")
                writeFloat("[[[[[028A33E4]+48]+20]+90]+90]+4",initial+2)
                hasRebalancedTimer = 1
            end
        end
    elseif readInteger(getAddress("[storyEvent]")+0x1C) == 1819432831 then --Independence Pass A
        if readPointer("[[[[[028A33E4]+48]+20]+90]+90]+4") ~= nil then
            if readFloat("[[[[[028A33E4]+48]+20]+90]+90]+4") &gt; 0 and hasRebalancedTimer == 0 then
                local initial = readFloat("[[[[[028A33E4]+48]+20]+90]+90]+4")
                writeFloat("[[[[[028A33E4]+48]+20]+90]+90]+4",initial+5)
                hasRebalancedTimer = 1
            end
        end
    elseif readInteger(getAddress("[storyEvent]")+0x1C) == 4228595706 then --Buffalo Gap Rev
        if readPointer("[[[[[028A33E4]+48]+20]+90]+90]+4") ~= nil then
            if readFloat("[[[[[028A33E4]+48]+20]+90]+90]+4") &gt; 0 and hasRebalancedTimer == 0 then
                local initial = readFloat("[[[[[028A33E4]+48]+20]+90]+90]+4")
                writeFloat("[[[[[028A33E4]+48]+20]+90]+90]+4",initial+5)
                hasRebalancedTimer = 1
            end
        end
    end
end

tmr = createTimer(nil)
timer_onTimer(tmr,TimerRebalance)
timer_setInterval(tmr, 1)
timer_setEnabled(tmr, true)

[DISABLE]
timer_setEnabled(tmr, false)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>861</ID>
          <Description>"Gas Stations"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()
function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end
function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end
[ENABLE]
math.randomseed(os.time())
print "The Classics Run Gas Stations timer enabled"
function GasStation()
    if readPointer("[[[[[02882500]+64]+1A8]+18]+1D8]+0") ~= nil then
        local firstCarArray = getAddress("[[[[[02882500]+64]+1A8]+18]+1D8]+0")
        if readPointer("[[[[027A4F60]+14]+68]+10]+4") ~= nil then
            local vehicleAIPreset = readInteger("[[[[027A4F60]+14]+68]+10]-2C")
            --WE CHECK ONLY THE EVENTS WHERE THE GAS STATION IS AVAILABLE FOR THE PLAYER
            if vehicleAIPreset == 1519118351 or --2_4
                vehicleAIPreset == 936372643 or --3_1
                vehicleAIPreset == 1244892309 or --3_2
                vehicleAIPreset == 977164155 then --3_5

                --FROM STAGE 2 YOSEMITE SOUTH A TO STAGE 3 LAS VEGAS CAR SELECT

                --TIER 1 STOCK &amp; CUSTOM
                --AUD_UR_QUA_91_PP_STOCK_1
                writeInteger(firstCarArray,2502726747)
                --BMW_M3_E30_90_PP_STOCK_1
                writeInteger(firstCarArray+0x4,1719691339)
                --CHE_CAM_SS_67_PP_STOCK_1
                writeInteger(firstCarArray+0x8,1522441908)
                --CHE_EL_CAM_70_PP_STOCK_1
                writeInteger(firstCarArray+0xC,4152999272)
                --DOD_CHA_RT_71_PP_STOCK_1
                writeInteger(firstCarArray+0x10,658081404)
                --FOR_MUS_302_69_PP_STOCK_1
                writeInteger(firstCarArray+0x14,1500183094)
                --NIS_240_ZG_71_PP_STOCK_1
                writeInteger(firstCarArray+0x18,1793448368)
                --NIS_GTR_STK_73_PP_STOCK_1
                writeInteger(firstCarArray+0x1C,3245189596)
                --TOY_COR_STK_86_PP_STOCK_1
                writeInteger(firstCarArray+0x20,382914145)
                --VOL_GTI_MK1_76_PP_STOCK_1
                writeInteger(firstCarArray+0x24,470621649)
                --PON_FIR_STK_78_PP_STOCK_1
                writeInteger(firstCarArray+0x28,3681840500)
                --NIS_S14_A_97_PP_STOCK_1
                writeInteger(firstCarArray+0x2C,2604553166)

                --TIER 2 STOCK &amp; CUSTOM
                --MAZ_RX7_RZ_98_PP_STOCK_1
                writeInteger(firstCarArray+0x30,1198552022)
                --NIS_GTR_R32_91_PP_STOCK_1
                writeInteger(firstCarArray+0x34,3686020850)
                --TOY_SUP_STK_98_PP_STOCK_1
                writeInteger(firstCarArray+0x38,1783504690)

                --OVERRIDE UNUSED SLOTS WITH PADDING
                local nextSlotCut = 0x3C
                for i=1,50 do
                    writeInteger(firstCarArray+nextSlotCut,3355304522)
                    nextSlotCut = nextSlotCut + 0x4
                end
            elseif vehicleAIPreset == 2103946066 or --4_3A
                vehicleAIPreset == 4198749810 then --5_2

                --FROM STAGE 4 DEATH VALLEY UPHILL NIGHT RACE TO STAGE 5 MOUNTAIN INTERSTATE REVERSE

                --TIER 3 STOCK &amp; CUSTOM
                --LAM_COU_QV_85_PP_STOCK_1
                writeInteger(firstCarArray,2031156362)
                --LAM_MIU_SV_71_PP_STOCK_1
                writeInteger(firstCarArray+0x4,3003939881)
                --SHE_DAY_COU_65_PP_STOCK_1
                writeInteger(firstCarArray+0x8,4152129083)
                --NIS_GTR_STK_73_NFS_E
                writeInteger(firstCarArray+0xC,907975255)
                --TOY_COR_STK_86_NFS_E
                writeInteger(firstCarArray+0x10,1333797271)
                --NIS_GTR_R32_91_PRESALE_1
                writeInteger(firstCarArray+0x14,AOBtoDEC("9C 08 57 6E"))
                --TOY_SUP_STK_98_NFS_E
                writeInteger(firstCarArray+0x18,AOBtoDEC("39 34 40 09"))

                --OVERRIDE UNUSED SLOTS WITH
                local nextSlotCut = 0x1C
                for i=1,50 do
                    writeInteger(firstCarArray+nextSlotCut,3355304522)
                    nextSlotCut = nextSlotCut + 0x4
                end
            elseif vehicleAIPreset == 2630955241 or --12_2
                vehicleAIPreset == 3567498589 or --13_3
                vehicleAIPreset == 155176213 then --13_31

                --FROM STAGE 9 TO END OF THE RUN

                --TIER 5 &amp; 6 STOCK &amp; CUSTOM
                --MCL_F1_STK_94_PP_STOCK_1
                writeInteger(firstCarArray,3082609147)
                --BMW_M3_E30_90_PP_RARE_1
                writeInteger(firstCarArray+0x4,2320421064)
                --SHE_DAY_COU_65_PP_RARE_1
                writeInteger(firstCarArray+0x8,4022012078)
                --SHE_DAY_COU_65_NFS_E
                writeInteger(firstCarArray+0xC,AOBtoDEC("61 6B 47 41"))
                --VOL_GTI_MK1_76_PP_RARE_1
                writeInteger(firstCarArray+0x10,3720220186)
                --CHE_CAM_SS_67_PP_RARE_1
                writeInteger(firstCarArray+0x14,313312439)
                --CHE_EL_CAM_70_PP_RARE_1
                writeInteger(firstCarArray+0x18,960019312)
                --FOR_VIC_TAXI_PLAYER
                writeInteger(firstCarArray+0x1C,3675475195)
                --MAZ_RX7_RZ_98_PP_RARE_1
                writeInteger(firstCarArray+0x20,2688135082)
                --NIS_S14_A_97_PP_RARE_1
                writeInteger(firstCarArray+0x24,1409617150)
                --PON_FIR_STK_78_PP_RARE_1
                writeInteger(firstCarArray+0x28,3044389769)
                --TOY_SUP_STK_98_MARKETING_1
                writeInteger(firstCarArray+0x2C,1222984308)
                --MAZ_RX7_RZ_98_NFS_E
                writeInteger(firstCarArray+0x30,529645684)
                --NIS_240_ZG_71_PP_RARE_1
                writeInteger(firstCarArray+0x34,4150176875)
                --NIS_GTR_STK_73_PP_RARE_1
                writeInteger(firstCarArray+0x38,1203603962)
                --NIS_GTR_R32_91_PP_RARE_1
                writeInteger(firstCarArray+0x3C,1279882972)

                --OVERRIDE UNUSED SLOTS WITH PADDING
                local nextSlotCut = 0x40
                for i=1,50 do
                    writeInteger(firstCarArray+nextSlotCut,3355304522)
                    nextSlotCut = nextSlotCut + 0x4
                end
            elseif vehicleAIPreset == 2326624465 or --6_1
                vehicleAIPreset == 1043227716 or --6_21
                vehicleAIPreset == 4205784620 or --9_0
                vehicleAIPreset == 2702855496 or --9_1
                vehicleAIPreset == 3768796673 or --9_3
                vehicleAIPreset == 3228960314 then --10_2

                --FROM STAGE 5 TO STAGE 9 URI CAR SELECT

                --TIER 3 &amp; 4 STOCK &amp; CUSTOM

                --TIER 3 STOCK &amp; CUSTOM
                --LAM_COU_QV_85_PP_STOCK_1
                writeInteger(firstCarArray,2031156362)
                --LAM_MIU_SV_71_PP_STOCK_1
                writeInteger(firstCarArray+0x4,3003939881)
                --SHE_DAY_COU_65_PP_STOCK_1
                writeInteger(firstCarArray+0x8,4152129083)
                --NIS_GTR_STK_73_NFS_E
                writeInteger(firstCarArray+0xC,907975255)
                --TOY_COR_STK_86_NFS_E
                writeInteger(firstCarArray+0x10,1333797271)
                --NIS_GTR_R32_91_PRESALE_1
                writeInteger(firstCarArray+0x14,AOBtoDEC("9C 08 57 6E"))
                --TOY_SUP_STK_98_NFS_E
                writeInteger(firstCarArray+0x18,AOBtoDEC("39 34 40 09"))

                --TIER 4 STOCK &amp; CUSTOM
                --POR_993_GT2_96_PP_STOCK_1
                writeInteger(firstCarArray+0x1C,AOBtoDEC("71 88 7E 3D"))
                --POR_993_GT2_96_E3
                writeInteger(firstCarArray+0x20,AOBtoDEC("8A 96 3A 36"))
                --POR_993_GT2_96_ADSALES_1
                writeInteger(firstCarArray+0x24,AOBtoDEC("07 60 D6 5E"))
                --POR_993_GT2_96_MARKETING_1
                writeInteger(firstCarArray+0x28,AOBtoDEC("CD DD EF FE"))
                --BMW_M3_E30_90_NFS_E
                writeInteger(firstCarArray+0x2C,143156729)
                --CHE_CAM_SS_67_NFS_E
                writeInteger(firstCarArray+0x30,764119014)
                --CHE_EL_CAM_70_NFS_E
                writeInteger(firstCarArray+0x34,3006189287)
                --DOD_CHA_RT_71_NFS_E
                writeInteger(firstCarArray+0x38,531246253)
                --FOR_MUS_302_69_ADSALES_1
                writeInteger(firstCarArray+0x3C,268766097)
                --FOR_MUS_302_69_NFS_E
                writeInteger(firstCarArray+0x40,2902452387)
                --NIS_240_ZG_71_MARKETING_1
                writeInteger(firstCarArray+0x44,3001286456)
                --NIS_240_ZG_71_PP_RUN
                writeInteger(firstCarArray+0x48,2581711499)
                --SHE_DAY_COU_65_PP_RUN
                writeInteger(firstCarArray+0x4C,3604153451)
                --VOL_GTI_MK1_76_NFS_E
                writeInteger(firstCarArray+0x50,1901714060)
                --AUD_UR_QUA_91_PP_RUN
                writeInteger(firstCarArray+0x54,470076578)
                --CHE_EL_CAM_70_PP_RIVAL_1
                writeInteger(firstCarArray+0x58,AOBtoDEC("9C B4 8C 1D"))
                --FOR_RTR_X_69_PP1V1
                writeInteger(firstCarArray+0x5C,AOBtoDEC("0B 36 E5 FF"))
                --NIS_S14_A_97_NFS_E
                writeInteger(firstCarArray+0x60,AOBtoDEC("31 91 D4 32"))
                --NIS_S14_A_97_ADSALES_1
                writeInteger(firstCarArray+0x64,AOBtoDEC("72 73 0C 7B"))
                --PON_FIR_STK_78_NFS_E
                writeInteger(firstCarArray+0x68,AOBtoDEC("41 E9 F9 A9"))

                --OVERRIDE UNUSED SLOTS WITH PADDING
                local nextSlotCut = 0x6C
                for i=1,50 do
                    writeInteger(firstCarArray+nextSlotCut,3355304522)
                    nextSlotCut = nextSlotCut + 0x4
                end
            end
        end
    end
end

gs = createTimer(nil)
timer_onTimer(gs,GasStation)
timer_setInterval(gs, 500)
timer_setEnabled(gs, true)

[DISABLE]
timer_setEnabled(gs, false)
print "The Classics Run Gas Stations timer disabled"
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>783</ID>
          <Description>"Gas Station Array Override"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

00853549:
nop
nop
 
[DISABLE]

00853549:
mov [eax],esi
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>445</ID>
          <Description>"UNLOCK ALL VEHICLES"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
mov [eax+18],1
jne "Need for Speed The Run.exe"+53D639

originalcode:
//cmp [eax+18],bl
//jne "Need for Speed The Run.exe"+53D639

exit:
jmp returnhere

"Need for Speed The Run.exe"+53D629:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)
"Need for Speed The Run.exe"+53D629:
cmp [eax+18],bl
jne "Need for Speed The Run.exe"+53D639
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>799</ID>
          <Description>"ID_PLAYLIST_CARRESTICTION_OPEN"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
push ebx
lea ebx,[esi+48]
mov [ebx],(int)0 //ID_PLAYLIST_CARRESTICTION_OPEN
mov ecx,[esi+48]
push 00
pop ebx

originalcode:
//mov ecx,[esi+48]
//push 00

exit:
jmp returnhere

"Need for Speed The Run.exe"+48D6C5:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)
"Need for Speed The Run.exe"+48D6C5:
mov ecx,[esi+48]
push 00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1</ID>
          <Description>"THE CLASSICS RUN STRING SWAP"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local AOB = "4D 41 4C 00 52 45 41 4C 49 53 54 49 43 00 53 45 4C 45 43 54 20 41 20 50 4C 41 59 4C 49 53 54 00"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format
if address ~= nil then
    local string_end = {0x00}
    writeString(address+0x20,"THE CLASSICS RUN")
    writeBytes(address+0x30,string_end)
    print "String Swap Complete Complete!"
else
    print "String Swap Failed!"
end


[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>926</ID>
          <Description>"MILA 2000GTR T3"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "46 98 3E E5"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "B9 98 0A 27"
    SPL_ID = "C2 FB 40 7D"
    EXH_ID = "AD 84 70 6C"
    --HOD_ID = "00 00 00 00"
    FRM_ID = "41 48 1C AE"
    RRM_ID = "41 48 1C AE"
    LIV_ID = "67 8A 91 13"
    PRF_ID = "51 C1 C9 80"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>927</ID>
          <Description>"NIKKI 2000GTR T3"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "D7 85 D7 92"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "B9 98 0A 27"
    --SPL_ID = "00 00 00 00"
    EXH_ID = "00 00 00 00"
    --HOD_ID = "00 00 00 00"
    FRM_ID = "83 87 30 49"
    RRM_ID = "83 87 30 49"
    LIV_ID = "64 8A 91 13"
    PRF_ID = "51 C1 C9 80"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>928</ID>
          <Description>"MILA 2000GTR T6"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "9A 98 47 9A"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "B9 98 0A 27"
    SPL_ID = "C2 FB 40 7D"
    EXH_ID = "AD 84 70 6C"
    HOD_ID = "00 00 00 00"
    FRM_ID = "41 48 1C AE"
    RRM_ID = "41 48 1C AE"
    LIV_ID = "67 8A 91 13"
    PRF_ID = "8E B4 6A 63"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>932</ID>
          <Description>"R32 GARRET T4"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

    local currentCar = "99 81 2C 54"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "4A 9A 83 36"
    SPL_ID = "61 4D F9 04"
    EXH_ID = "EB F5 98 2F"
    --HOD_ID = "00 00 00 00"
    FRM_ID = "23 FE 6B 72"
    RRM_ID = "23 FE 6B 72"
    LIV_ID = "A7 3D 7F 40"
    PRF_ID = "3C 7D B4 82"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>931</ID>
          <Description>"R32 GARRET T6"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "07 08 DF 95"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "4A 9A 83 36"
    SPL_ID = "61 4D F9 04"
    EXH_ID = "EB F5 98 2F"
    --HOD_ID = "00 00 00 00"
    FRM_ID = "23 FE 6B 72"
    RRM_ID = "23 FE 6B 72"
    LIV_ID = "A7 3D 7F 40"
    PRF_ID = "DB AD E4 33"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>933</ID>
          <Description>"CAMARO SS EDDIE T5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "E5 21 6D 68"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "E4 E2 43 69"
    SPL_ID = "00 00 00 00"
    EXH_ID = "2B 1B 5A 2C"
    --HOD_ID = "00 00 00 00"
    FRM_ID = "A4 D5 19 40"
    RRM_ID = "A4 D5 19 40"
    LIV_ID = "C3 C6 B2 A4"
    PRF_ID = "91 21 38 5E"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>934</ID>
          <Description>"EL CAMINO DELEON T5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "A1 56 67 E1"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "8B 37 3A F9"
    SPL_ID = "00 00 00 00"
    EXH_ID = "4D 94 3E 52"
    HOD_ID = "00 00 00 00"
    FRM_ID = "24 69 86 BE"
    RRM_ID = "E6 68 2C C3"
    LIV_ID = "C7 34 E3 38"
    PRF_ID = "DD 42 B9 22"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>946</ID>
          <Description>"TOY_SUP_RAD_98_TIER_4"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "18 A0 CA 29"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    --BDK_ID = "00 00 00 00"
    SPL_ID = "00 00 00 00"
    --EXH_ID = "EB 45 11 77"
    --HOD_ID = "00 00 00 00"
    FRM_ID = "EC 43 17 C2"
    RRM_ID = "EC 43 17 C2"
    LIV_ID = "17 0E 78 E1"
    PRF_ID = "6E 75 B9 79" --34 1C 17 50

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>949</ID>
          <Description>"NIS_240_ZG_71_TIER_4"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "FC 13 81 6B"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "BD 9A 29 EB"
    SPL_ID = "C2 FB 40 7D"
    EXH_ID = "C9 BF 63 E6"
    --HOD_ID = "0B C9 FC E2"
    FRM_ID = "05 D5 BA 73"
    RRM_ID = "05 D5 BA 73" --C3 46 86 44 23 FE 6B 72
    LIV_ID = "67 66 EC 1C"
    PRF_ID = "CC 7F C2 DD"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>962</ID>
          <Description>"TOY_COR_STK_86_TIER_4"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "C4 39 92 29"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    --BDK_ID = "00 00 00 00"
    --SPL_ID = "E1 E7 29 F6"
    EXH_ID = "6D 8A 5A FE"
    --HOD_ID = "0B C9 FC E2"
    FRM_ID = "38 02 29 8B"
    RRM_ID = "38 02 29 8B"
    LIV_ID = "C0 47 AB 92"
    PRF_ID = "97 21 80 4F"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>964</ID>
          <Description>"NFS_240_ZG_71_NFS_E_TIER_6"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "44 F7 F1 46"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "BD 9A 29 EB"
    --SPL_ID = "E1 E7 29 F6"
    EXH_ID = "CD BF 63 E6"
    --HOD_ID = "0B C9 FC E2"
    FRM_ID = "38 02 29 8B"
    RRM_ID = "38 02 29 8B"
    --LIV_ID = "C0 47 AB 92"
    PRF_ID = "F0 96 0C EE"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>942</ID>
          <Description>"AUD_UR_QUA_91_TIER_5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "BF 4C AC 14"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    --BDK_ID = "00 00 00 00"
    SPL_ID = "A1 61 17 D2"
    EXH_ID = "00 00 00 00"
    --HOD_ID = "00 00 00 00"
    FRM_ID = "90 E4 C4 56" --E0 3A 62 20
    RRM_ID = "90 E4 C4 56"
    LIV_ID = "C6 FC C0 A8"
    PRF_ID = "4F 7D 8B 28"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>943</ID>
          <Description>"DOD_CHA_RT_71_TANNER_TIER_5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "59 43 9F D9"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    --BDK_ID = "00 00 00 00"
    --SPL_ID = "A1 61 17 D2"
    --EXH_ID = "00 00 00 00"
    --HOD_ID = "00 00 00 00"
    --FRM_ID = "90 E4 C4 56"
    --RRM_ID = "90 E4 C4 56"
    LIV_ID = "C4 AF 4A F8"
    PRF_ID = "91 21 38 5E"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>944</ID>
          <Description>"FOR_MUS_302_69_TIER_5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "E0 78 5E 9D"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    --BDK_ID = "00 00 00 00"
    --SPL_ID = "A1 61 17 D2"
    EXH_ID = "EB 45 11 77"
    --HOD_ID = "00 00 00 00"
    --FRM_ID = "00 00 00 00"
    --RRM_ID = "00 00 00 00"
    LIV_ID = "06 30 33 B8"
    PRF_ID = "A4 98 C7 2B"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>945</ID>
          <Description>"FOR_RTR_X_69_TIER_4"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "05 F2 DE 5F"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    --BDK_ID = "00 00 00 00"
    --SPL_ID = "A1 61 17 D2"
    --EXH_ID = "EB 45 11 77"
    --HOD_ID = "00 00 00 00"
    FRM_ID = "7D 15 49 B2"
    RRM_ID = "E6 28 64 7C"
    LIV_ID = "E3 61 39 55"
    PRF_ID = "5A 35 E3 7D" --E6 87 8B 2D

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>947</ID>
          <Description>"BMW_M3_E30_90_TIER_5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "12 32 6B 5C"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "AF 53 CE 99"
    SPL_ID = "81 1E 94 3D"
    --EXH_ID = "00 00 00 00"
    --HOD_ID = "00 00 00 00"
    --FRM_ID = "EC 43 17 C2"
    --RRM_ID = "EC 43 17 C2"
    LIV_ID = "A4 80 A8 38"
    PRF_ID = "4F 7D 8B 28"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>948</ID>
          <Description>"LAM_COU_QV_85_TIER_5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "6C 1D E1 1E"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    --BDK_ID = "D7 90 A2 E7"
    SPL_ID = "69 4D 22 67"
    EXH_ID = "2A 05 65 00"
    --HOD_ID = "0B C9 FC E2"
    FRM_ID = "90 E4 C4 56"
    RRM_ID = "C1 50 2B 8B"
    LIV_ID = "C3 1F E8 47"
    PRF_ID = "24 21 38 0F" --16 FA DF 4B

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>950</ID>
          <Description>"MAZ_RX7_RZ_98_TIER_6"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "E8 01 55 DD"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "66 1D 96 87"
    SPL_ID = "C2 FB 40 7D"
    EXH_ID = "6C 1F D4 CE"
    HOD_ID = "00 00 00 00"
    FRM_ID = "E6 6B 63 0B"
    RRM_ID = "E6 6B 63 0B"
    LIV_ID = "82 F5 EC 34"
    PRF_ID = "74 C0 91 1F"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>951</ID>
          <Description>"NIS_S14_A_97_TIER_5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "62 5F F6 53"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "00 00 00 00"
    SPL_ID = "C2 FB 40 7D"
    EXH_ID = "EC F5 98 2F"
    --HOD_ID = "00 00 00 00"
    FRM_ID = "DF 06 2E 5A"
    RRM_ID = "77 CD E5 02"
    LIV_ID = "23 DC F7 7C"
    PRF_ID = "36 75 AA 6A"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>952</ID>
          <Description>"PON_FIR_STK_78_TIER_4"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "64 7C 00 58"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "00 00 00 00"
    SPL_ID = "C2 FB 40 7D"
    EXH_ID = "A9 FD 86 67"
    HOD_ID = "2D 5C 61 DB"
    FRM_ID = "52 A3 07 AD"
    RRM_ID = "52 A3 07 AD"
    LIV_ID = "03 16 C4 F2"
    PRF_ID = "AF 90 31 DD"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>953</ID>
          <Description>"SHE_DAY_COU_65_TIER_5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "86 6D 7F CF"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "DC 25 04 98"
    --SPL_ID = "C2 FB 40 7D"
    --EXH_ID = "A9 FD 86 67"
    --HOD_ID = "2D 5C 61 DB"
    FRM_ID = "A4 D5 19 40" --66 BD 5F 31
    RRM_ID = "A4 D5 19 40"
    LIV_ID = "07 2F 6E 2A"
    PRF_ID = "4D B2 08 21"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>954</ID>
          <Description>"TOY_SUP_STK_98_TIER_4"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F9416A54" --First Vehicle of Customization Template
local addressEnd = "F945A5D4" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "44 B2 6A 5C"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "7D 5A D1 4A"
    SPL_ID = "00 00 00 00"
    EXH_ID = "00 00 00 00"
    HOD_ID = "00 00 00 00"
    FRM_ID = "89 E0 FE 75"
    RRM_ID = "89 E0 FE 75"
    LIV_ID = "3C E8 8F D8"
    PRF_ID = "6E 75 B9 79"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>955</ID>
          <Description>"VOL_GTI_MK1_76_TIER_5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "8C 6D 5D 6A"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "7D 68 8F AB"
    SPL_ID = "A1 38 7F 1E"
    EXH_ID = "2A 05 65 00"
    HOD_ID = "00 00 00 00"
    FRM_ID = "E0 3A 62 20"
    RRM_ID = "E0 3A 62 20"
    LIV_ID = "63 37 4D 9C"
    PRF_ID = "17 EB E4 E6"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>956</ID>
          <Description>"NIS_240_ZG_71_PP_RUN_GARAGE_CAR_TIER_6"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "8B CA E1 99"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "BD 9A 29 EB"
    SPL_ID = "C2 FB 40 7D"
    EXH_ID = "CD BF 63 E6"
    --HOD_ID = "0B C9 FC E2"
    FRM_ID = "34 6C 3D C3"
    RRM_ID = "34 6C 3D C3" --C3 46 86 44 23 FE 6B 72
    LIV_ID = "17 6D F7 37"
    PRF_ID = "F0 96 0C EE"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>957</ID>
          <Description>"NIS_240_S30_71_TIER_4"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "29 D2 CE 60"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    --BDK_ID = "00 00 00 00"
    SPL_ID = "C2 FB 40 7D"
    EXH_ID = "C9 BF 63 E6"
    --HOD_ID = "0B C9 FC E2"
    FRM_ID = "83 87 30 49"
    RRM_ID = "C1 46 86 44"
    LIV_ID = "9C E3 98 BD"
    PRF_ID = "A1 8F CC C1"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>958</ID>
          <Description>"MCL_F1_STK_94_TIER_6"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "E0 65 D2 DC"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    --BDK_ID = "00 00 00 00"
    --SPL_ID = "C2 FB 40 7D"
    --EXH_ID = "00 00 00 00"
    --HOD_ID = "0B C9 FC E2"
    FRM_ID = "00 00 00 00"
    RRM_ID = "00 00 00 00"
    LIV_ID = "C5 2D 9C 49"
    --PRF_ID = "A1 8F CC C1"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>959</ID>
          <Description>"LAM_MIU_SV_71_TIER_4"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "98 9F 9B BF"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    --BDK_ID = "00 00 00 00"
    --SPL_ID = "C2 FB 40 7D"
    --EXH_ID = "00 00 00 00"
    --HOD_ID = "0B C9 FC E2"
    FRM_ID = "00 00 00 00"
    RRM_ID = "00 00 00 00"
    LIV_ID = "45 F9 21 70"
    PRF_ID = "11 34 B1 5B"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>960</ID>
          <Description>"POR_993_GT2_96_TIER_4"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "C9 2E CC 24"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    --BDK_ID = "00 00 00 00"
    SPL_ID = "E1 E7 29 F6"
    EXH_ID = "EC 88 38 CB"
    --HOD_ID = "0B C9 FC E2"
    FRM_ID = "75 AE 26 19"
    RRM_ID = "75 AE 26 19"
    LIV_ID = "43 1F 82 16"
    PRF_ID = "E5 E4 A8 68"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>961</ID>
          <Description>"POR_993_GT2_RWB_96_TIER_4"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "00 76 9F 16"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    --BDK_ID = "00 00 00 00"
    --SPL_ID = "E1 E7 29 F6"
    EXH_ID = "AE B2 A7 0A"
    --HOD_ID = "0B C9 FC E2"
    FRM_ID = "2E 44 71 BD"
    RRM_ID = "2E 44 71 BD"
    LIV_ID = "3C 57 37 89"
    PRF_ID = "2E 23 7B 2D"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>965</ID>
          <Description>"NIS_GTR_R32_91_AI_TIER_4"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "32 DC 09 BD"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "08 9A 83 36"
    SPL_ID = "61 4D F9 04"
    EXH_ID = "EA 01 CF 7E"
    HOD_ID = "00 00 00 00"
    FRM_ID = "EA 31 8B 8D"
    RRM_ID = "EA 31 8B 8D"
    LIV_ID = "B7 73 A1 39"
    PRF_ID = "3C 7D B4 82"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
